-- using Mentor Graphics HDL Designer(TM) 2005.3 (Build 75)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

ENTITY Memory IS
   PORT( 
      ADDRESS  : IN     LC3b_word;
      DATAOUT  : IN     LC3b_word;
      MREAD_L  : IN     std_logic;
      MWRITE_L : IN     std_logic;
      RESET_L  : IN     std_logic;
      clk      : IN     std_logic;
      DATAIN   : OUT    LC3b_word;
      MRESP_H  : OUT    std_logic
   );

-- Declarations

END Memory ;

--
ARCHITECTURE UNTITLED OF MEMORY IS
	SIGNAL PRE_MRESP_H : STD_LOGIC;
BEGIN
	-------------------------------------------------------------------
	VHDL_MEMORY : PROCESS (RESET_L, MREAD_L, MWRITE_L) 
	-------------------------------------------------------------------
	VARIABLE MEM : MEMORY_ARRAY_64K;
	VARIABLE INT_ADDRESS : INTEGER;
	VARIABLE INT_OLD_ADDRESS : INTEGER;
	VARIABLE TEMP : STRING(1 TO 10);
	VARIABLE TEMP_INT : INTEGER;
	BEGIN
		INT_ADDRESS := TO_INTEGER(UNSIGNED('0' & ADDRESS(11 DOWNTO 0)));
		IF RESET_L = '0' THEN
			PRE_MRESP_H <= '0';
			MYDRAMINIT_64K(MEM);
		ELSE
			IF ((INT_ADDRESS >= 0) AND (INT_ADDRESS <= 4096)) THEN
				--CHECK FOR TIMING ERRORS
				IF (MWRITE_L'EVENT AND (MWRITE_L'LAST_VALUE = '0') AND (INT_ADDRESS /= INT_OLD_ADDRESS)) THEN
					ASSERT FALSE 
					REPORT "MEMORY WRITE TIMING ERROR"
					SEVERITY NOTE;
				END IF;
				IF (MREAD_L'EVENT AND (MREAD_L'LAST_VALUE = '0') AND (INT_ADDRESS /= INT_OLD_ADDRESS)) THEN
					ASSERT FALSE 
					REPORT "MEMORY READ TIMING ERROR"
					SEVERITY NOTE;
				END IF;
				--PERFORM A READ
				IF (MREAD_L = '0' AND MWRITE_L = '1') THEN
					DATAIN(7 DOWNTO 0) <= MEM(INT_ADDRESS) AFTER (DELAY_MP1_MEM);
					DATAIN(15 DOWNTO 8) <= MEM(INT_ADDRESS + 1) AFTER (DELAY_MP1_MEM);
					PRE_MRESP_H <= '1' AFTER 0 NS, '0' AFTER CLOCK_PERIOD;
					INT_OLD_ADDRESS := INT_ADDRESS;
				--PERFORM A WRITE
				ELSIF (MWRITE_L = '0' AND MREAD_L = '1') THEN
					MEM(INT_ADDRESS) := DATAOUT(7 DOWNTO 0);
					MEM(INT_ADDRESS + 1) := DATAOUT(15 DOWNTO 8);
					PRE_MRESP_H <= '1' AFTER 0 NS, '0' AFTER CLOCK_PERIOD;
					INT_OLD_ADDRESS := INT_ADDRESS;
				ELSE
					ASSERT FALSE 
					REPORT "MEMORY WRITE"
					SEVERITY NOTE;
				END IF;
			ELSE
				ASSERT FALSE
				REPORT "INVALID ADDRESS"
				SEVERITY WARNING;
			END IF;
		END IF;	
	END PROCESS VHDL_MEMORY;
	MRESP_H <= PRE_MRESP_H'DELAYED(DELAY_MP1_MEM);
END UNTITLED;
