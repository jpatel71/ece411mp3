-- VHDL Entity ece411.L2_Cache.symbol
--
-- Created:
--          by - tmurray5.stdt (eelnx34.ews.illinois.edu)
--          at - 13:48:13 11/11/10
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2005.3 (Build 75)
--
LIBRARY ieee;
USE ieee.NUMERIC_STD.all;
USE ieee.std_logic_1164.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

ENTITY L2_Cache IS
   PORT( 
      DATAOUT     : IN     LC3B_OWORD;
      L2_DATAIN   : IN     LC3B_OWORD;
      PM_MREAD_L  : IN     STD_LOGIC;
      clk         : IN     std_logic;
      mresp_h     : IN     STD_LOGIC;
      pm_address  : IN     LC3B_WORD;
      pm_mwrite_l : IN     STD_LOGIC;
      reset_l     : IN     std_logic;
      ADDRESS     : OUT    LC3B_WORD;
      PM_DATAOUT  : OUT    LC3B_OWORD;
      PM_MRESP_H  : OUT    STD_LOGIC;
      dataIn      : OUT    lc3b_oword;
      mread_l     : OUT    STD_LOGIC;
      mwrite_l    : OUT    STD_LOGIC
   );

-- Declarations

END L2_Cache ;

--
-- VHDL Architecture ece411.L2_Cache.struct
--
-- Created:
--          by - tmurray5.stdt (eelnx34.ews.illinois.edu)
--          at - 13:48:13 11/11/10
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2005.3 (Build 75)
--
LIBRARY ieee;
USE ieee.NUMERIC_STD.all;
USE ieee.std_logic_1164.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

LIBRARY ece411;
LIBRARY mp3lib;

ARCHITECTURE struct OF L2_Cache IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL DdirtyWrite0    : STD_LOGIC;
   SIGNAL DdirtyWrite1    : STD_LOGIC;
   SIGNAL DdirtyWrite2    : STD_LOGIC;
   SIGNAL DdirtyWrite3    : STD_LOGIC;
   SIGNAL DdirtyWrite4    : STD_LOGIC;
   SIGNAL DdirtyWrite5    : STD_LOGIC;
   SIGNAL DdirtyWrite6    : STD_LOGIC;
   SIGNAL DdirtyWrite7    : STD_LOGIC;
   SIGNAL Din_load        : STD_LOGIC;
   SIGNAL LRUOut          : STD_LOGIC_VECTOR(2 DOWNTO 0);
   SIGNAL dataWrite0      : STD_LOGIC;
   SIGNAL dataWrite1      : STD_LOGIC;
   SIGNAL dataWrite2      : STD_LOGIC;
   SIGNAL dataWrite3      : STD_LOGIC;
   SIGNAL dataWrite4      : STD_LOGIC;
   SIGNAL dataWrite5      : STD_LOGIC;
   SIGNAL dataWrite6      : STD_LOGIC;
   SIGNAL dataWrite7      : STD_LOGIC;
   SIGNAL dirty           : STD_LOGIC;
   SIGNAL dirtyOut0       : std_logic;
   SIGNAL dirtyOut1       : std_logic;
   SIGNAL dirtyOut2       : std_logic;
   SIGNAL dirtyOut3       : std_logic;
   SIGNAL dirtyOut4       : std_logic;
   SIGNAL dirtyOut5       : std_logic;
   SIGNAL dirtyOut6       : std_logic;
   SIGNAL dirtyOut7       : std_logic;
   SIGNAL dirtyWrite0     : STD_LOGIC;
   SIGNAL dirtyWrite1     : STD_LOGIC;
   SIGNAL dirtyWrite2     : STD_LOGIC;
   SIGNAL dirtyWrite3     : STD_LOGIC;
   SIGNAL dirtyWrite4     : STD_LOGIC;
   SIGNAL dirtyWrite5     : STD_LOGIC;
   SIGNAL dirtyWrite6     : STD_LOGIC;
   SIGNAL dirtyWrite7     : STD_LOGIC;
   SIGNAL hit             : STD_LOGIC;
   SIGNAL hitgate         : std_logic;
   SIGNAL hitgate1        : std_logic;
   SIGNAL in_idleHit      : STD_LOGIC;
   SIGNAL in_load         : STD_LOGIC;
   SIGNAL in_writeBack    : STD_LOGIC;
   SIGNAL index           : lc3b_index5;
   SIGNAL lineSel         : std_logic_vector(7 DOWNTO 0);
   SIGNAL mem_access      : STD_LOGIC;
   SIGNAL miss            : STD_LOGIC;
   SIGNAL newAddr         : LC3b_word;
   SIGNAL notHit          : STD_LOGIC;
   SIGNAL notPM_MWRITE_L0 : STD_LOGIC;
   SIGNAL notPM_MWRITE_L1 : STD_LOGIC;
   SIGNAL notPM_MWRITE_L2 : STD_LOGIC;
   SIGNAL notPM_MWRITE_L3 : STD_LOGIC;
   SIGNAL notPM_MWRITE_L4 : STD_LOGIC;
   SIGNAL notPM_MWRITE_L5 : STD_LOGIC;
   SIGNAL notPM_MWRITE_L6 : STD_LOGIC;
   SIGNAL notPM_MWRITE_L7 : STD_LOGIC;
   SIGNAL offset          : lc3b_offset;
   SIGNAL preHit0         : STD_LOGIC;
   SIGNAL preHit1         : STD_LOGIC;
   SIGNAL preHit2         : STD_LOGIC;
   SIGNAL preHit3         : STD_LOGIC;
   SIGNAL preHit4         : STD_LOGIC;
   SIGNAL preHit5         : STD_LOGIC;
   SIGNAL preHit6         : STD_LOGIC;
   SIGNAL preHit7         : STD_LOGIC;
   SIGNAL protoHit        : STD_LOGIC;
   SIGNAL tag             : lc3b_l2tag;
   SIGNAL tagMatch0       : STD_LOGIC;
   SIGNAL tagMatch1       : STD_LOGIC;
   SIGNAL tagMatch2       : STD_LOGIC;
   SIGNAL tagMatch3       : STD_LOGIC;
   SIGNAL tagMatch4       : STD_LOGIC;
   SIGNAL tagMatch5       : STD_LOGIC;
   SIGNAL tagMatch6       : STD_LOGIC;
   SIGNAL tagMatch7       : STD_LOGIC;
   SIGNAL tagOut          : lc3b_l2tag;
   SIGNAL tagOut0         : lc3b_l2tag;
   SIGNAL tagOut1         : lc3b_l2tag;
   SIGNAL tagOut2         : lc3b_l2tag;
   SIGNAL tagOut3         : lc3b_l2tag;
   SIGNAL tagOut4         : lc3b_l2tag;
   SIGNAL tagOut5         : lc3b_l2tag;
   SIGNAL tagOut6         : lc3b_l2tag;
   SIGNAL tagOut7         : lc3b_l2tag;
   SIGNAL validOut0       : std_logic;
   SIGNAL validOut1       : std_logic;
   SIGNAL validOut2       : std_logic;
   SIGNAL validOut3       : std_logic;
   SIGNAL validOut4       : std_logic;
   SIGNAL validOut5       : std_logic;
   SIGNAL validOut6       : std_logic;
   SIGNAL validOut7       : std_logic;
   SIGNAL way0_dataOut    : lc3b_oword;
   SIGNAL way1_dataOut    : lc3b_oword;
   SIGNAL way2_dataOut    : lc3b_oword;
   SIGNAL way3_dataOut    : lc3b_oword;
   SIGNAL way4_dataOut    : lc3b_oword;
   SIGNAL way5_dataOut    : lc3b_oword;
   SIGNAL way6_dataOut    : lc3b_oword;
   SIGNAL way7_dataOut    : lc3b_oword;
   SIGNAL wbWrite0        : STD_LOGIC;
   SIGNAL wbWrite1        : STD_LOGIC;
   SIGNAL wbWrite2        : STD_LOGIC;
   SIGNAL wbWrite3        : STD_LOGIC;
   SIGNAL wbWrite4        : STD_LOGIC;
   SIGNAL wbWrite5        : STD_LOGIC;
   SIGNAL wbWrite6        : STD_LOGIC;
   SIGNAL wbWrite7        : STD_LOGIC;
   SIGNAL writeData       : lc3b_oword;


   -- Component Declarations
   COMPONENT AND_4
   PORT (
      A : IN     STD_LOGIC ;
      B : IN     STD_LOGIC ;
      C : IN     STD_LOGIC ;
      D : IN     std_logic ;
      F : OUT    STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT AddrJoin
   PORT (
      index   : IN     lc3b_index5 ;
      tagOut  : IN     lc3b_l2tag ;
      newAddr : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT Buf1
   PORT (
      A : IN     STD_LOGIC ;
      F : OUT    STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT L2AddrSplit
   PORT (
      pm_address : IN     LC3B_WORD ;
      index      : OUT    lc3b_index5 ;
      tag        : OUT    lc3b_l2tag ;
      offset     : OUT    lc3b_offset 
   );
   END COMPONENT;
   COMPONENT L2_CacheController
   PORT (
      clk          : IN     std_logic ;
      dirty        : IN     std_logic ;
      mem_access   : IN     STD_LOGIC ;
      miss         : IN     std_logic ;
      mresp_h      : IN     STD_LOGIC ;
      reset_l      : IN     std_logic ;
      in_idleHit   : OUT    STD_LOGIC ;
      in_load      : OUT    STD_LOGIC ;
      in_writeBack : OUT    STD_LOGIC ;
      mread_l      : OUT    STD_LOGIC ;
      mwrite_l     : OUT    STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT LRU_L2
   PORT (
      index   : IN     lc3b_index5 ;
      reset_l : IN     std_logic ;
      LRUOut  : OUT    STD_LOGIC_VECTOR (2 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT MUX8_1
   PORT (
      A      : IN     STD_LOGIC ;
      B      : IN     STD_LOGIC ;
      C      : IN     STD_LOGIC ;
      D      : IN     STD_LOGIC ;
      E      : IN     STD_LOGIC ;
      F      : IN     STD_LOGIC ;
      G      : IN     STD_LOGIC ;
      H      : IN     STD_LOGIC ;
      SEL    : IN     STD_LOGIC_VECTOR (2 DOWNTO 0);
      Output : OUT    STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT MUX8_128
   PORT (
      A      : IN     lc3b_oword ;
      B      : IN     lc3b_oword ;
      C      : IN     lc3b_oword ;
      D      : IN     lc3b_oword ;
      E      : IN     lc3b_oword ;
      F      : IN     lc3b_oword ;
      G      : IN     lc3b_oword ;
      H      : IN     lc3b_oword ;
      SEL    : IN     STD_LOGIC_VECTOR (2 DOWNTO 0);
      Output : OUT    lc3b_oword 
   );
   END COMPONENT;
   COMPONENT MUX8_7
   PORT (
      A      : IN     lc3b_l2tag ;
      B      : IN     lc3b_l2tag ;
      C      : IN     lc3b_l2tag ;
      D      : IN     lc3b_l2tag ;
      E      : IN     lc3b_l2tag ;
      F      : IN     lc3b_l2tag ;
      G      : IN     lc3b_l2tag ;
      H      : IN     lc3b_l2tag ;
      SEL    : IN     STD_LOGIC_VECTOR (2 DOWNTO 0);
      Output : OUT    lc3b_l2tag 
   );
   END COMPONENT;
   COMPONENT decoder3_8
   PORT (
      sel     : IN     std_logic_vector (2 DOWNTO 0);
      lineSel : OUT    std_logic_vector (7 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT delayClk
   PORT (
      Clk     : IN     std_logic ;
      hitgate : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT delayedClk_L2
   PORT (
      clk      : IN     std_logic ;
      reset_l  : IN     std_logic ;
      hitgate1 : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT protoHit_L2
   PORT (
      preHit0  : IN     STD_LOGIC ;
      preHit1  : IN     STD_LOGIC ;
      preHit2  : IN     STD_LOGIC ;
      preHit3  : IN     STD_LOGIC ;
      preHit4  : IN     STD_LOGIC ;
      preHit5  : IN     STD_LOGIC ;
      preHit6  : IN     STD_LOGIC ;
      preHit7  : IN     STD_LOGIC ;
      protoHit : OUT    STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT tagComp
   PORT (
      A : IN     LC3B_l2tag ;
      B : IN     LC3B_l2tag ;
      F : OUT    STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT way512b
   PORT (
      dataIn    : IN     lc3b_oword ;
      dataWrite : IN     std_logic ;
      dirtyIn   : IN     std_logic ;
      index     : IN     lc3b_index5 ;
      reset_l   : IN     std_logic ;
      tagIn     : IN     lc3b_l2tag ;
      dataOut   : OUT    lc3b_oword ;
      dirtyOut  : OUT    std_logic ;
      tagOut    : OUT    lc3b_l2tag ;
      validOut  : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT waySelect_L2
   PORT (
      preHit0      : IN     STD_LOGIC ;
      preHit1      : IN     STD_LOGIC ;
      preHit2      : IN     STD_LOGIC ;
      preHit3      : IN     STD_LOGIC ;
      preHit4      : IN     STD_LOGIC ;
      preHit5      : IN     STD_LOGIC ;
      preHit6      : IN     STD_LOGIC ;
      preHit7      : IN     STD_LOGIC ;
      way0_dataOut : IN     lc3b_oword ;
      way1_dataOut : IN     lc3b_oword ;
      way2_dataOut : IN     lc3b_oword ;
      way3_dataOut : IN     lc3b_oword ;
      way4_dataOut : IN     lc3b_oword ;
      way5_dataOut : IN     lc3b_oword ;
      way6_dataOut : IN     lc3b_oword ;
      way7_dataOut : IN     lc3b_oword ;
      F            : OUT    lc3b_oword 
   );
   END COMPONENT;
   COMPONENT waySelecter
   PORT (
      a   : IN     lc3b_oword ;
      b   : IN     lc3b_oword ;
      sel : IN     std_logic ;
      f   : OUT    lc3b_oword 
   );
   END COMPONENT;
   COMPONENT AND2
   PORT (
      A : IN     STD_LOGIC ;
      B : IN     STD_LOGIC ;
      F : OUT    STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT AND3
   PORT (
      A : IN     STD_LOGIC ;
      B : IN     STD_LOGIC ;
      C : IN     STD_LOGIC ;
      F : OUT    STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT MUX2_16
   PORT (
      A   : IN     LC3B_WORD ;
      B   : IN     LC3B_WORD ;
      SEL : IN     STD_LOGIC ;
      F   : OUT    LC3B_WORD 
   );
   END COMPONENT;
   COMPONENT NAND2
   PORT (
      A : IN     STD_LOGIC ;
      B : IN     STD_LOGIC ;
      F : OUT    STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT NOT1
   PORT (
      A : IN     STD_LOGIC ;
      F : OUT    STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT OR2
   PORT (
      A : IN     STD_LOGIC ;
      B : IN     STD_LOGIC ;
      F : OUT    STD_LOGIC 
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : AND2 USE ENTITY mp3lib.AND2;
   FOR ALL : AND3 USE ENTITY mp3lib.AND3;
   FOR ALL : AND_4 USE ENTITY ece411.AND_4;
   FOR ALL : AddrJoin USE ENTITY ece411.AddrJoin;
   FOR ALL : Buf1 USE ENTITY ece411.Buf1;
   FOR ALL : L2AddrSplit USE ENTITY ece411.L2AddrSplit;
   FOR ALL : L2_CacheController USE ENTITY ece411.L2_CacheController;
   FOR ALL : LRU_L2 USE ENTITY ece411.LRU_L2;
   FOR ALL : MUX2_16 USE ENTITY mp3lib.MUX2_16;
   FOR ALL : MUX8_1 USE ENTITY ece411.MUX8_1;
   FOR ALL : MUX8_128 USE ENTITY ece411.MUX8_128;
   FOR ALL : MUX8_7 USE ENTITY ece411.MUX8_7;
   FOR ALL : NAND2 USE ENTITY mp3lib.NAND2;
   FOR ALL : NOT1 USE ENTITY mp3lib.NOT1;
   FOR ALL : OR2 USE ENTITY mp3lib.OR2;
   FOR ALL : decoder3_8 USE ENTITY ece411.decoder3_8;
   FOR ALL : delayClk USE ENTITY ece411.delayClk;
   FOR ALL : delayedClk_L2 USE ENTITY ece411.delayedClk_L2;
   FOR ALL : protoHit_L2 USE ENTITY ece411.protoHit_L2;
   FOR ALL : tagComp USE ENTITY ece411.tagComp;
   FOR ALL : way512b USE ENTITY ece411.way512b;
   FOR ALL : waySelect_L2 USE ENTITY ece411.waySelect_L2;
   FOR ALL : waySelecter USE ENTITY ece411.waySelecter;
   -- pragma synthesis_on


BEGIN

   -- Instance port mappings.
   hitGen : AND_4
      PORT MAP (
         A => mem_access,
         B => protoHit,
         C => hitgate,
         D => in_idleHit,
         F => hit
      );
   aAddrJoin : AddrJoin
      PORT MAP (
         index   => index,
         tagOut  => tagOut,
         newAddr => newAddr
      );
   dirtyBuf0 : Buf1
      PORT MAP (
         A => dirtyWrite0,
         F => DdirtyWrite0
      );
   dirtyBuf1 : Buf1
      PORT MAP (
         A => dirtyWrite1,
         F => DdirtyWrite1
      );
   dirtyBuf2 : Buf1
      PORT MAP (
         A => dirtyWrite2,
         F => DdirtyWrite2
      );
   dirtyBuf3 : Buf1
      PORT MAP (
         A => dirtyWrite3,
         F => DdirtyWrite3
      );
   dirtyBuf4 : Buf1
      PORT MAP (
         A => dirtyWrite4,
         F => DdirtyWrite4
      );
   dirtyBuf5 : Buf1
      PORT MAP (
         A => dirtyWrite5,
         F => DdirtyWrite5
      );
   dirtyBuf6 : Buf1
      PORT MAP (
         A => dirtyWrite6,
         F => DdirtyWrite6
      );
   dirtyBuf7 : Buf1
      PORT MAP (
         A => dirtyWrite7,
         F => DdirtyWrite7
      );
   writeBuf : Buf1
      PORT MAP (
         A => in_load,
         F => Din_load
      );
   aL2AddrSplit : L2AddrSplit
      PORT MAP (
         pm_address => pm_address,
         index      => index,
         tag        => tag,
         offset     => offset
      );
   a_L2_CacheController : L2_CacheController
      PORT MAP (
         clk          => clk,
         dirty        => dirty,
         mem_access   => mem_access,
         miss         => miss,
         mresp_h      => mresp_h,
         reset_l      => reset_l,
         in_idleHit   => in_idleHit,
         in_load      => in_load,
         in_writeBack => in_writeBack,
         mread_l      => mread_l,
         mwrite_l     => mwrite_l
      );
   aLRU_L2 : LRU_L2
      PORT MAP (
         index   => index,
         reset_l => reset_l,
         LRUOut  => LRUOut
      );
   dirtyMux : MUX8_1
      PORT MAP (
         A      => dirtyOut0,
         B      => dirtyOut1,
         C      => dirtyOut2,
         D      => dirtyOut3,
         E      => dirtyOut4,
         F      => dirtyOut5,
         G      => dirtyOut6,
         H      => dirtyOut7,
         SEL    => LRUOut,
         Output => dirty
      );
   evictLineSel : MUX8_128
      PORT MAP (
         A      => way0_dataOut,
         B      => way1_dataOut,
         C      => way2_dataOut,
         D      => way3_dataOut,
         E      => way4_dataOut,
         F      => way5_dataOut,
         G      => way6_dataOut,
         H      => way7_dataOut,
         SEL    => LRUOut,
         Output => dataIn
      );
   tagMux : MUX8_7
      PORT MAP (
         A      => tagOut0,
         B      => tagOut1,
         C      => tagOut2,
         D      => tagOut3,
         E      => tagOut4,
         F      => tagOut5,
         G      => tagOut6,
         H      => tagOut7,
         SEL    => LRUOut,
         Output => tagOut
      );
   wayWriteSel : decoder3_8
      PORT MAP (
         sel     => LRUOut,
         lineSel => lineSel
      );
   U_0 : delayClk
      PORT MAP (
         Clk     => clk,
         hitgate => hitgate
      );
   aDelayedClock_L2 : delayedClk_L2
      PORT MAP (
         clk      => clk,
         reset_l  => reset_l,
         hitgate1 => hitgate1
      );
   aProtoHit_L2 : protoHit_L2
      PORT MAP (
         preHit0  => preHit0,
         preHit1  => preHit1,
         preHit2  => preHit2,
         preHit3  => preHit3,
         preHit4  => preHit4,
         preHit5  => preHit5,
         preHit6  => preHit6,
         preHit7  => preHit7,
         protoHit => protoHit
      );
   aTagComp_0 : tagComp
      PORT MAP (
         A => tag,
         B => tagOut0,
         F => tagMatch0
      );
   aTagComp_1 : tagComp
      PORT MAP (
         A => tag,
         B => tagOut1,
         F => tagMatch1
      );
   aTagComp_2 : tagComp
      PORT MAP (
         A => tag,
         B => tagOut2,
         F => tagMatch2
      );
   aTagComp_3 : tagComp
      PORT MAP (
         A => tag,
         B => tagOut3,
         F => tagMatch3
      );
   aTagComp_4 : tagComp
      PORT MAP (
         A => tag,
         B => tagOut4,
         F => tagMatch4
      );
   aTagComp_5 : tagComp
      PORT MAP (
         A => tag,
         B => tagOut5,
         F => tagMatch5
      );
   aTagComp_6 : tagComp
      PORT MAP (
         A => tag,
         B => tagOut6,
         F => tagMatch6
      );
   aTagComp_7 : tagComp
      PORT MAP (
         A => tag,
         B => tagOut7,
         F => tagMatch7
      );
   aWay512k_0 : way512b
      PORT MAP (
         dataIn    => writeData,
         dataWrite => dataWrite0,
         dirtyIn   => DdirtyWrite0,
         index     => index,
         reset_l   => reset_l,
         tagIn     => tag,
         dataOut   => way0_dataOut,
         dirtyOut  => dirtyOut0,
         tagOut    => tagOut0,
         validOut  => validOut0
      );
   aWay512k_1 : way512b
      PORT MAP (
         dataIn    => writeData,
         dataWrite => dataWrite1,
         dirtyIn   => DdirtyWrite1,
         index     => index,
         reset_l   => reset_l,
         tagIn     => tag,
         dataOut   => way1_dataOut,
         dirtyOut  => dirtyOut1,
         tagOut    => tagOut1,
         validOut  => validOut1
      );
   aWay512k_2 : way512b
      PORT MAP (
         dataIn    => writeData,
         dataWrite => dataWrite2,
         dirtyIn   => DdirtyWrite2,
         index     => index,
         reset_l   => reset_l,
         tagIn     => tag,
         dataOut   => way2_dataOut,
         dirtyOut  => dirtyOut2,
         tagOut    => tagOut2,
         validOut  => validOut2
      );
   aWay512k_3 : way512b
      PORT MAP (
         dataIn    => writeData,
         dataWrite => dataWrite3,
         dirtyIn   => DdirtyWrite3,
         index     => index,
         reset_l   => reset_l,
         tagIn     => tag,
         dataOut   => way3_dataOut,
         dirtyOut  => dirtyOut3,
         tagOut    => tagOut3,
         validOut  => validOut3
      );
   aWay512k_4 : way512b
      PORT MAP (
         dataIn    => writeData,
         dataWrite => dataWrite4,
         dirtyIn   => DdirtyWrite4,
         index     => index,
         reset_l   => reset_l,
         tagIn     => tag,
         dataOut   => way4_dataOut,
         dirtyOut  => dirtyOut4,
         tagOut    => tagOut4,
         validOut  => validOut4
      );
   aWay512k_5 : way512b
      PORT MAP (
         dataIn    => writeData,
         dataWrite => dataWrite5,
         dirtyIn   => DdirtyWrite5,
         index     => index,
         reset_l   => reset_l,
         tagIn     => tag,
         dataOut   => way5_dataOut,
         dirtyOut  => dirtyOut5,
         tagOut    => tagOut5,
         validOut  => validOut5
      );
   aWay512k_6 : way512b
      PORT MAP (
         dataIn    => writeData,
         dataWrite => dataWrite6,
         dirtyIn   => DdirtyWrite6,
         index     => index,
         reset_l   => reset_l,
         tagIn     => tag,
         dataOut   => way6_dataOut,
         dirtyOut  => dirtyOut6,
         tagOut    => tagOut6,
         validOut  => validOut6
      );
   aWay512k_7 : way512b
      PORT MAP (
         dataIn    => writeData,
         dataWrite => dataWrite7,
         dirtyIn   => DdirtyWrite7,
         index     => index,
         reset_l   => reset_l,
         tagIn     => tag,
         dataOut   => way7_dataOut,
         dirtyOut  => dirtyOut7,
         tagOut    => tagOut7,
         validOut  => validOut7
      );
   aWaySelect_L2 : waySelect_L2
      PORT MAP (
         preHit0      => preHit0,
         preHit1      => preHit1,
         preHit2      => preHit2,
         preHit3      => preHit3,
         preHit4      => preHit4,
         preHit5      => preHit5,
         preHit6      => preHit6,
         preHit7      => preHit7,
         way0_dataOut => way0_dataOut,
         way1_dataOut => way1_dataOut,
         way2_dataOut => way2_dataOut,
         way3_dataOut => way3_dataOut,
         way4_dataOut => way4_dataOut,
         way5_dataOut => way5_dataOut,
         way6_dataOut => way6_dataOut,
         way7_dataOut => way7_dataOut,
         F            => PM_DATAOUT
      );
   wayDataSel_L2 : waySelecter
      PORT MAP (
         a   => L2_DATAIN,
         b   => DATAOUT,
         sel => Din_load,
         f   => writeData
      );
   WBwrite00 : AND2
      PORT MAP (
         A => in_load,
         B => lineSel(0),
         F => wbWrite0
      );
   WBwrite01 : AND2
      PORT MAP (
         A => in_load,
         B => lineSel(1),
         F => wbWrite1
      );
   WBwrite02 : AND2
      PORT MAP (
         A => in_load,
         B => lineSel(2),
         F => wbWrite2
      );
   WBwrite03 : AND2
      PORT MAP (
         A => in_load,
         B => lineSel(3),
         F => wbWrite3
      );
   WBwrite04 : AND2
      PORT MAP (
         A => in_load,
         B => lineSel(4),
         F => wbWrite4
      );
   WBwrite05 : AND2
      PORT MAP (
         A => in_load,
         B => lineSel(5),
         F => wbWrite5
      );
   WBwrite06 : AND2
      PORT MAP (
         A => in_load,
         B => lineSel(6),
         F => wbWrite6
      );
   WBwrite07 : AND2
      PORT MAP (
         A => in_load,
         B => lineSel(7),
         F => wbWrite7
      );
   missGen : AND2
      PORT MAP (
         A => mem_access,
         B => notHit,
         F => miss
      );
   mresp : AND2
      PORT MAP (
         A => hit,
         B => in_idleHit,
         F => PM_MRESP_H
      );
   valid0 : AND2
      PORT MAP (
         A => tagMatch0,
         B => validOut0,
         F => preHit0
      );
   valid1 : AND2
      PORT MAP (
         A => tagMatch1,
         B => validOut1,
         F => preHit1
      );
   valid2 : AND2
      PORT MAP (
         A => tagMatch2,
         B => validOut2,
         F => preHit2
      );
   valid3 : AND2
      PORT MAP (
         A => tagMatch3,
         B => validOut3,
         F => preHit3
      );
   valid4 : AND2
      PORT MAP (
         A => tagMatch4,
         B => validOut4,
         F => preHit4
      );
   valid5 : AND2
      PORT MAP (
         A => tagMatch5,
         B => validOut5,
         F => preHit5
      );
   valid6 : AND2
      PORT MAP (
         A => tagMatch6,
         B => validOut6,
         F => preHit6
      );
   valid7 : AND2
      PORT MAP (
         A => tagMatch7,
         B => validOut7,
         F => preHit7
      );
   dirtySel : AND3
      PORT MAP (
         A => notPM_MWRITE_L0,
         B => in_idleHit,
         C => preHit0,
         F => dirtyWrite0
      );
   dirtySel1 : AND3
      PORT MAP (
         A => notPM_MWRITE_L1,
         B => in_idleHit,
         C => preHit1,
         F => dirtyWrite1
      );
   dirtySel2 : AND3
      PORT MAP (
         A => notPM_MWRITE_L2,
         B => in_idleHit,
         C => preHit2,
         F => dirtyWrite2
      );
   dirtySel3 : AND3
      PORT MAP (
         A => notPM_MWRITE_L3,
         B => in_idleHit,
         C => preHit3,
         F => dirtyWrite3
      );
   dirtySel4 : AND3
      PORT MAP (
         A => notPM_MWRITE_L4,
         B => in_idleHit,
         C => preHit4,
         F => dirtyWrite4
      );
   dirtySel5 : AND3
      PORT MAP (
         A => notPM_MWRITE_L5,
         B => in_idleHit,
         C => preHit5,
         F => dirtyWrite5
      );
   dirtySel6 : AND3
      PORT MAP (
         A => notPM_MWRITE_L6,
         B => in_idleHit,
         C => preHit6,
         F => dirtyWrite6
      );
   dirtySel7 : AND3
      PORT MAP (
         A => notPM_MWRITE_L7,
         B => in_idleHit,
         C => preHit7,
         F => dirtyWrite7
      );
   ADDRSel : MUX2_16
      PORT MAP (
         A   => pm_address,
         B   => newAddr,
         SEL => in_writeBack,
         F   => ADDRESS
      );
   checkAccess : NAND2
      PORT MAP (
         A => pm_mwrite_l,
         B => PM_MREAD_L,
         F => mem_access
      );
   notHitGate : NOT1
      PORT MAP (
         A => hit,
         F => notHit
      );
   notWrite : NOT1
      PORT MAP (
         A => pm_mwrite_l,
         F => notPM_MWRITE_L0
      );
   notWrite1 : NOT1
      PORT MAP (
         A => pm_mwrite_l,
         F => notPM_MWRITE_L1
      );
   notWrite2 : NOT1
      PORT MAP (
         A => pm_mwrite_l,
         F => notPM_MWRITE_L2
      );
   notWrite3 : NOT1
      PORT MAP (
         A => pm_mwrite_l,
         F => notPM_MWRITE_L3
      );
   notWrite4 : NOT1
      PORT MAP (
         A => pm_mwrite_l,
         F => notPM_MWRITE_L4
      );
   notWrite5 : NOT1
      PORT MAP (
         A => pm_mwrite_l,
         F => notPM_MWRITE_L5
      );
   notWrite6 : NOT1
      PORT MAP (
         A => pm_mwrite_l,
         F => notPM_MWRITE_L6
      );
   notWrite7 : NOT1
      PORT MAP (
         A => pm_mwrite_l,
         F => notPM_MWRITE_L7
      );
   writeSel : OR2
      PORT MAP (
         A => dirtyWrite0,
         B => wbWrite0,
         F => dataWrite0
      );
   writeSel1 : OR2
      PORT MAP (
         A => dirtyWrite1,
         B => wbWrite1,
         F => dataWrite1
      );
   writeSel2 : OR2
      PORT MAP (
         A => dirtyWrite2,
         B => wbWrite2,
         F => dataWrite2
      );
   writeSel3 : OR2
      PORT MAP (
         A => dirtyWrite3,
         B => wbWrite3,
         F => dataWrite3
      );
   writeSel4 : OR2
      PORT MAP (
         A => dirtyWrite4,
         B => wbWrite4,
         F => dataWrite4
      );
   writeSel5 : OR2
      PORT MAP (
         A => dirtyWrite5,
         B => wbWrite5,
         F => dataWrite5
      );
   writeSel6 : OR2
      PORT MAP (
         A => dirtyWrite6,
         B => wbWrite6,
         F => dataWrite6
      );
   writeSel7 : OR2
      PORT MAP (
         A => dirtyWrite7,
         B => wbWrite7,
         F => dataWrite7
      );

END struct;
