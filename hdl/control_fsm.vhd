-- VHDL Entity ece411.Control.interface
--
-- Created:
--          by - tmurray5.stdt (eelnx37.ews.illinois.edu)
--          at - 15:42:47 10/14/10
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2005.3 (Build 75)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

ENTITY Control IS
   PORT( 
      ADDRESS0    : IN     std_logic;
      CheckN      : IN     std_logic;
      CheckP      : IN     std_logic;
      CheckZ      : IN     std_logic;
      D           : IN     std_logic;
      MRESP_H     : IN     std_logic;
      Opcode      : IN     LC3B_Opcode;
      RESET_L     : IN     std_logic;
      START_H     : IN     std_logic;
      bit11       : IN     std_logic;
      bit5        : IN     std_logic;
      clk         : IN     std_logic;
      n           : IN     std_logic;
      p           : IN     std_logic;
      z           : IN     std_logic;
      ALUMuxSel   : OUT    LC3b_4MUX_Sel;
      ALUop       : OUT    LC3b_aluop;
      AdderMuxSel : OUT    std_logic;
      ByteSel     : OUT    std_logic;
      DestMuxSel  : OUT    std_logic;
      LoadIR      : OUT    std_logic;
      LoadMAR     : OUT    std_logic;
      LoadMDR     : OUT    std_logic;
      LoadNZP     : OUT    std_logic;
      LoadPC      : OUT    std_logic;
      MARMuxSel   : OUT    lc3b_4mux_sel;
      MDRMuxSel   : OUT    std_logic;
      MREAD_L     : OUT    std_logic;
      MWRITEH_L   : OUT    std_logic;
      MWRITEL_L   : OUT    std_logic;
      PCMuxSel    : OUT    LC3B_4MUX_SEL;
      RFMuxSel    : OUT    LC3B_4MUX_SEL;
      RegWrite    : OUT    std_logic;
      StoreSR     : OUT    std_logic
   );

-- Declarations

END Control ;

--
-- VHDL Architecture ece411.Control.fsm
--
-- Created:
--          by - tmurray5.stdt (eelnx37.ews.illinois.edu)
--          at - 15:42:48 10/14/10
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2005.3 (Build 75)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;
 
ARCHITECTURE fsm OF Control IS

   TYPE STATE_TYPE IS (
      Reset,
      Decode,
      BR1,
      BR2,
      L_NOT,
      IF1,
      IF2,
      IF3,
      CalcADDR,
      ST1,
      LD1,
      ST2,
      LD2,
      ADDreg,
      ADDimm5,
      ANDreg,
      ANDimm5,
      JMP,
      JSR,
      JSRR,
      SAVE,
      Address,
      LDB1,
      LDB2,
      STB1,
      STB2,
      LEA,
      LDISTI1,
      LDISTI2,
      LDI,
      STI1,
      STI2,
      ShiftLeft,
      ShiftRightArithmetic,
      ShiftRightLogical,
      TRAP1,
      TRAP2,
      TRAP3,
      TRAP4,
      STB3
   );
 
   -- State vector declaration
   ATTRIBUTE state_vector : string;
   ATTRIBUTE state_vector OF fsm : ARCHITECTURE IS "current_state";

   -- Declare current and next state signals
   SIGNAL current_state : STATE_TYPE;
   SIGNAL next_state : STATE_TYPE;

BEGIN

   -----------------------------------------------------------------
   clocked_proc : PROCESS ( 
      clk,
      RESET_L
   )
   -----------------------------------------------------------------
   BEGIN
      IF (RESET_L = '0') THEN
         current_state <= Reset;
      ELSIF (clk'EVENT AND clk = '1') THEN
         current_state <= next_state;
      END IF;
   END PROCESS clocked_proc;
 
   -----------------------------------------------------------------
   nextstate_proc : PROCESS ( 
      ADDRESS0,
      CheckN,
      CheckP,
      CheckZ,
      D,
      MRESP_H,
      Opcode,
      START_H,
      bit11,
      bit5,
      current_state,
      n,
      p,
      z
   )
   -----------------------------------------------------------------
   BEGIN
      CASE current_state IS
         WHEN Reset => 
            IF (START_H = '1') THEN 
               next_state <= IF1;
            ELSE
               next_state <= Reset;
            END IF;
         WHEN Decode => 
            IF ((Opcode = op_ldr) OR
                (Opcode = op_str) OR
                (Opcode = op_ldi) OR
                (Opcode = op_sti)) THEN 
               next_state <= CalcADDR;
            ELSIF (Opcode = op_not) THEN 
               next_state <= L_NOT;
            ELSIF ((Opcode = op_add) AND (bit5 = '0')) THEN 
               next_state <= ADDreg;
            ELSIF ((Opcode = op_add) AND (bit5 = '1')) THEN 
               next_state <= ADDimm5;
            ELSIF ((Opcode = op_and) AND (bit5 = '0')) THEN 
               next_state <= ANDreg;
            ELSIF ((Opcode = op_and) AND (bit5 = '1')) THEN 
               next_state <= ANDimm5;
            ELSIF (Opcode = op_br) THEN 
               next_state <= BR1;
            ELSIF ((Opcode = op_jmp) OR
                   (Opcode = op_ret)) THEN 
               next_state <= JMP;
            ELSIF (Opcode = op_jsr) THEN 
               next_state <= SAVE;
            ELSIF ((Opcode = op_ldb) OR
                   (Opcode = op_stb)) THEN 
               next_state <= Address;
            ELSIF (Opcode = op_lea) THEN 
               next_state <= LEA;
            ELSIF ((Opcode = op_shf) AND (D = '0')) THEN 
               next_state <= ShiftLeft;
            ELSIF ((Opcode = op_shf) AND ((D = '1') AND
                   (bit5 = '0'))) THEN 
               next_state <= ShiftRightLogical;
            ELSIF ((Opcode = op_shf) AND ((D = '1') AND
                   (bit5 = '1'))) THEN 
               next_state <= ShiftRightArithmetic;
            ELSIF (Opcode = op_trap) THEN 
               next_state <= TRAP1;
            ELSE
               next_state <= IF1;
            END IF;
         WHEN BR1 => 
            IF (( ( n AND CheckN ) OR
                ( p AND CheckP ) OR
                ( z AND CheckZ ) ) = '1') THEN 
               next_state <= BR2;
            ELSE
               next_state <= IF1;
            END IF;
         WHEN BR2 => 
            next_state <= IF1;
         WHEN L_NOT => 
            next_state <= IF1;
         WHEN IF1 => 
            next_state <= IF2;
         WHEN IF2 => 
            IF (MRESP_H = '1') THEN 
               next_state <= IF3;
            ELSE
               next_state <= IF2;
            END IF;
         WHEN IF3 => 
            next_state <= Decode;
         WHEN CalcADDR => 
            IF (Opcode = op_str) THEN 
               next_state <= ST1;
            ELSIF (Opcode = op_ldr) THEN 
               next_state <= LD1;
            ELSIF ((Opcode = op_ldi) OR
                   (Opcode = op_sti)) THEN 
               next_state <= LDISTI1;
            ELSE
               next_state <= CalcADDR;
            END IF;
         WHEN ST1 => 
            next_state <= ST2;
         WHEN LD1 => 
            IF (MRESP_H = '1') THEN 
               next_state <= LD2;
            ELSE
               next_state <= LD1;
            END IF;
         WHEN ST2 => 
            IF (MRESP_H = '1') THEN 
               next_state <= IF1;
            ELSE
               next_state <= ST2;
            END IF;
         WHEN LD2 => 
            next_state <= IF1;
         WHEN ADDreg => 
            next_state <= IF1;
         WHEN ADDimm5 => 
            next_state <= IF1;
         WHEN ANDreg => 
            next_state <= IF1;
         WHEN ANDimm5 => 
            next_state <= IF1;
         WHEN JMP => 
            next_state <= IF1;
         WHEN JSR => 
            next_state <= IF1;
         WHEN JSRR => 
            next_state <= IF1;
         WHEN SAVE => 
            IF (bit11 = '1') THEN 
               next_state <= JSR;
            ELSIF (bit11 = '0') THEN 
               next_state <= JSRR;
            ELSE
               next_state <= SAVE;
            END IF;
         WHEN Address => 
            IF (Opcode = op_ldb) THEN 
               next_state <= LDB1;
            ELSIF (Opcode = op_stb) THEN 
               next_state <= STB1;
            ELSE
               next_state <= Address;
            END IF;
         WHEN LDB1 => 
            IF (MRESP_H = '1') THEN 
               next_state <= LDB2;
            ELSE
               next_state <= LDB1;
            END IF;
         WHEN LDB2 => 
            next_state <= IF1;
         WHEN STB1 => 
            IF (ADDRESS0 = '0') THEN 
               next_state <= STB3;
            ELSIF (ADDRESS0 = '1') THEN 
               next_state <= STB2;
            ELSE
               next_state <= STB1;
            END IF;
         WHEN STB2 => 
            IF (MRESP_H = '1') THEN 
               next_state <= IF1;
            ELSE
               next_state <= STB2;
            END IF;
         WHEN LEA => 
            next_state <= IF1;
         WHEN LDISTI1 => 
            IF (MRESP_H = '1') THEN 
               next_state <= LDISTI2;
            ELSE
               next_state <= LDISTI1;
            END IF;
         WHEN LDISTI2 => 
            IF (Opcode = op_ldi) THEN 
               next_state <= LDI;
            ELSIF (Opcode = op_sti) THEN 
               next_state <= STI1;
            ELSE
               next_state <= LDISTI2;
            END IF;
         WHEN LDI => 
            IF (MRESP_H = '1') THEN 
               next_state <= LD2;
            ELSE
               next_state <= LDI;
            END IF;
         WHEN STI1 => 
            next_state <= STI2;
         WHEN STI2 => 
            IF (MRESP_H = '1') THEN 
               next_state <= IF1;
            ELSE
               next_state <= STI2;
            END IF;
         WHEN ShiftLeft => 
            next_state <= IF1;
         WHEN ShiftRightArithmetic => 
            next_state <= IF1;
         WHEN ShiftRightLogical => 
            next_state <= IF1;
         WHEN TRAP1 => 
            next_state <= TRAP2;
         WHEN TRAP2 => 
            next_state <= TRAP3;
         WHEN TRAP3 => 
            IF (MRESP_H = '1') THEN 
               next_state <= TRAP4;
            ELSE
               next_state <= TRAP3;
            END IF;
         WHEN TRAP4 => 
            next_state <= IF1;
         WHEN STB3 => 
            IF (MRESP_H = '1') THEN 
               next_state <= IF1;
            ELSE
               next_state <= STB3;
            END IF;
         WHEN OTHERS =>
            next_state <= Reset;
      END CASE;
   END PROCESS nextstate_proc;
 
   -----------------------------------------------------------------
   output_proc : PROCESS ( 
      current_state
   )
   -----------------------------------------------------------------
   BEGIN
      -- Default Assignment
      ALUMuxSel <= "00";
      ALUop <= "000";
      AdderMuxSel <= '0';
      ByteSel <= '0';
      DestMuxSel <= '0';
      LoadIR <= '0';
      LoadMAR <= '0';
      LoadMDR <= '0';
      LoadNZP <= '0';
      LoadPC <= '0';
      MARMuxSel <= "00";
      MDRMuxSel <= '0';
      MREAD_L <= '1';
      MWRITEH_L <= '1';
      MWRITEL_L <= '1';
      PCMuxSel <= "00";
      RFMuxSel <= "00";
      RegWrite <= '0';
      StoreSR <= '1';

      -- Combined Actions
      CASE current_state IS
         WHEN BR2 => 
            PCMuxSel <= "01";
            LoadPC <= '1';
            AdderMuxSel <= '0';
         WHEN L_NOT => 
            ALUop <= alu_not;
            RegWrite <= '1';
            LoadNZP <= '1';
            RFMuxSel <= "01";
         WHEN IF1 => 
            LoadMAR <= '1';
            LoadPC <= '1';
         WHEN IF2 => 
            LoadMDR <= '1';
            MREAD_L <= '0' after 6 ns;
         WHEN IF3 => 
            LoadIR <= '1';
         WHEN CalcADDR => 
            ALUMuxSel <= "11";
            ALUop <= alu_add;
            MARMuxSel <= "11";
            LoadMAR <= '1';
         WHEN ST1 => 
            StoreSR <= '0';
            ALUop <= alu_pass;
            LoadMDR <= '1';
            MDRMuxSel <= '1';
         WHEN LD1 => 
            LoadMDR <= '1';
            MREAD_L <= '0' after 6ns;
         WHEN ST2 => 
            MWRITEL_L <= '0' after 6ns;
            MWRITEH_L <= '0' after 6ns;
         WHEN LD2 => 
            RegWrite <= '1';
            LoadNZP <= '1';
         WHEN ADDreg => 
            ALUop <= alu_add;
            ALUMuxSel <= "00";
            RegWrite <= '1';
            LoadNzp <= '1';
            RFMuxSel <= "01";
         WHEN ADDimm5 => 
            ALUop <= alu_add;
            ALUMuxSel <= "10";
            RegWrite <= '1';
            LoadNZP <= '1';
            RFMuxSel <= "01";
         WHEN ANDreg => 
            ALUMuxSel <= "00";
            ALUop <= alu_and;
            RegWrite <= '1';
            LoadNZP <= '1';
            RFMuxSel <= "01";
         WHEN ANDimm5 => 
            ALUMuxSel <= "10";
            ALUop <= alu_and;
            RegWrite <= '1';
            LoadNZP <= '1';
            RFMuxSel <= "01";
         WHEN JMP => 
            ALUop <= alu_pass;
            PCMuxSel <= "11";
            LoadPC <= '1';
         WHEN JSR => 
            AdderMuxSel <= '1';
            PCMuxSel <= "01";
            LoadPC <= '1';
         WHEN JSRR => 
            ALUop <= alu_pass;
            PCMuxSel <= "11";
            LoadPc <= '1';
         WHEN SAVE => 
            DestMuxSel <= '1';
            RFMuxSel <= "10";
            RegWrite <= '1';
         WHEN Address => 
            ALUop <= alu_add;
            StoreSr <= '1';
            ALUMuxSel <= "11";
            MarMuxSel <= "11";
            LoadMar <= '1';
            ByteSel <= '1';
         WHEN LDB1 => 
            LoadMDR <= '1';
            MREAD_L <= '0' after 6ns;
            ByteSel <= '1';
         WHEN LDB2 => 
            RegWrite <= '1';
            LoadNZP <= '1';
            ByteSel <= '1';
         WHEN STB1 => 
            StoreSR <= '0';
            ALUop <= alu_pass;
            MDRMuxSel <= '1';
            LoadMDR <= '1';
            ByteSel <= '1';
         WHEN STB2 => 
            ByteSel <= '1';
            MWRITEH_L <= '0' after 6ns;
         WHEN LEA => 
            RFMuxSel <= "11";
            RegWrite <= '1';
            LoadNZP <= '1';
         WHEN LDISTI1 => 
            LoadMDR <= '1';
            MREAD_L <= '0' after 6ns;
         WHEN LDISTI2 => 
            MARMuxSel <= "10";
            LoadMAR <= '1';
         WHEN LDI => 
            LoadMDR <= '1';
            MREAD_L <= '0' after 6ns;
         WHEN STI1 => 
            StoreSR <= '0';
            ALUop <= alu_pass;
            LoadMDR <= '1';
            MDRMuxSel <= '1';
         WHEN STI2 => 
            MWRITEL_L <= '0' after 6ns;
            MWRITEH_L <= '0' after 6ns;
         WHEN ShiftLeft => 
            ALUMuxSel <= "01";
            ALUop <= alu_sll;
            RFMuxSel <= "01";
            RegWrite <= '1';
            LoadNZP <= '1';
         WHEN ShiftRightArithmetic => 
            ALUMuxSel <= "01";
            ALUop <= alu_sra;
            RFMuxSel <= "01";
            RegWrite <= '1';
            LoadNZP <= '1';
         WHEN ShiftRightLogical => 
            ALUMuxSel <= "01";
            ALUop <= alu_srl;
            RFMuxSel <= "01";
            RegWrite <= '1';
            LoadNZP <= '1';
         WHEN TRAP1 => 
            RFMuxSel <= "10";
            DestMuxSel <= '1';
            RegWrite <= '1';
         WHEN TRAP2 => 
            MARMuxSel <= "01";
            LoadMAR <= '1';
         WHEN TRAP3 => 
            LoadMDR <= '1';
            MREAD_L <= '0' after 6ns;
         WHEN TRAP4 => 
            PCMuxSel <= "10";
            LoadPC <= '1';
         WHEN STB3 => 
            ByteSel <= '1';
            MWRITEL_L <= '0' after 6ns;
         WHEN OTHERS =>
            NULL;
      END CASE;
   END PROCESS output_proc;
 
END fsm;
