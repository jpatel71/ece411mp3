-- VHDL Entity ece411.writeCombiner.symbol
--
-- Created:
--          by - tmurray5.stdt (eelnx25.ews.illinois.edu)
--          at - 21:06:39 10/28/10
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2005.3 (Build 75)
--
LIBRARY ieee;
USE ieee.NUMERIC_STD.all;
USE ieee.std_logic_1164.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

ENTITY writeCombiner IS
   PORT( 
      DataOut        : IN     lc3b_word;
      WaySelecterOut : IN     LC3B_oWORD;
      mwriteh_l      : IN     std_logic;
      mwritel_l      : IN     std_logic;
      offset         : IN     lc3b_offset;
      wcData         : OUT    lc3b_oword
   );

-- Declarations

END writeCombiner ;

--
-- VHDL Architecture ece411.writeCombiner.struct
--
-- Created:
--          by - tmurray5.stdt (eelnx25.ews.illinois.edu)
--          at - 21:06:39 10/28/10
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2005.3 (Build 75)
--
LIBRARY ieee;
USE ieee.NUMERIC_STD.all;
USE ieee.std_logic_1164.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

LIBRARY ece411;

ARCHITECTURE struct OF writeCombiner IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL line0        : lc3b_word;
   SIGNAL line1        : lc3b_word;
   SIGNAL line2        : lc3b_word;
   SIGNAL line3        : lc3b_word;
   SIGNAL line4        : lc3b_word;
   SIGNAL line5        : lc3b_word;
   SIGNAL line6        : lc3b_word;
   SIGNAL line7        : lc3b_word;
   SIGNAL lineDataOut  : lc3b_word;
   SIGNAL lineDataOut1 : lc3b_word;
   SIGNAL lineDataOut2 : lc3b_word;
   SIGNAL lineDataOut3 : lc3b_word;
   SIGNAL lineDataOut4 : lc3b_word;
   SIGNAL lineDataOut5 : lc3b_word;
   SIGNAL lineDataOut6 : lc3b_word;
   SIGNAL lineDataOut7 : lc3b_word;
   SIGNAL lineSel      : std_logic_vector(7 DOWNTO 0);


   -- Component Declarations
   COMPONENT lineJoiner
   PORT (
      lineDataOut1 : IN     lc3b_word ;
      lineDataOut2 : IN     lc3b_word ;
      lineDataOut3 : IN     lc3b_word ;
      lineDataOut4 : IN     lc3b_word ;
      lineDataOut5 : IN     lc3b_word ;
      lineDataOut6 : IN     lc3b_word ;
      lineDataOut7 : IN     lc3b_word ;
      lineDataOut0 : IN     lc3b_word ;
      wcData       : OUT    lc3b_oword 
   );
   END COMPONENT;
   COMPONENT lineSplitter
   PORT (
      line0          : OUT    lc3b_word ;
      line1          : OUT    lc3b_word ;
      line2          : OUT    lc3b_word ;
      line3          : OUT    lc3b_word ;
      line4          : OUT    lc3b_word ;
      line5          : OUT    lc3b_word ;
      line6          : OUT    lc3b_word ;
      line7          : OUT    lc3b_word ;
      WaySelecterOut : IN     LC3B_oWORD 
   );
   END COMPONENT;
   COMPONENT writeDecoder
   PORT (
      lineSel : OUT    std_logic_vector (7 DOWNTO 0);
      offset  : IN     lc3b_offset 
   );
   END COMPONENT;
   COMPONENT writer
   PORT (
      DataOut     : IN     lc3b_word ;
      decodeOut   : IN     std_logic ;
      lineData    : IN     lc3b_word ;
      mwriteh_l   : IN     std_logic ;
      mwritel_l   : IN     std_logic ;
      lineDataOut : OUT    lc3b_word 
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : lineJoiner USE ENTITY ece411.lineJoiner;
   FOR ALL : lineSplitter USE ENTITY ece411.lineSplitter;
   FOR ALL : writeDecoder USE ENTITY ece411.writeDecoder;
   FOR ALL : writer USE ENTITY ece411.writer;
   -- pragma synthesis_on


BEGIN

   -- Instance port mappings.
   L1_LineJoiner : lineJoiner
      PORT MAP (
         lineDataOut1 => lineDataOut1,
         lineDataOut2 => lineDataOut2,
         lineDataOut3 => lineDataOut3,
         lineDataOut4 => lineDataOut4,
         lineDataOut5 => lineDataOut5,
         lineDataOut6 => lineDataOut6,
         lineDataOut7 => lineDataOut7,
         lineDataOut0 => lineDataOut,
         wcData       => wcData
      );
   L1_LineSplitter : lineSplitter
      PORT MAP (
         line0          => line0,
         line1          => line1,
         line2          => line2,
         line3          => line3,
         line4          => line4,
         line5          => line5,
         line6          => line6,
         line7          => line7,
         WaySelecterOut => WaySelecterOut
      );
   U_0 : writeDecoder
      PORT MAP (
         lineSel => lineSel,
         offset  => offset
      );
   L1Write0 : writer
      PORT MAP (
         DataOut     => DataOut,
         decodeOut   => lineSel(0),
         lineData    => line0,
         mwriteh_l   => mwriteh_l,
         mwritel_l   => mwritel_l,
         lineDataOut => lineDataOut
      );
   L1Writer1 : writer
      PORT MAP (
         DataOut     => DataOut,
         decodeOut   => lineSel(1),
         lineData    => line1,
         mwriteh_l   => mwriteh_l,
         mwritel_l   => mwritel_l,
         lineDataOut => lineDataOut1
      );
   L1Writer2 : writer
      PORT MAP (
         DataOut     => DataOut,
         decodeOut   => lineSel(2),
         lineData    => line2,
         mwriteh_l   => mwriteh_l,
         mwritel_l   => mwritel_l,
         lineDataOut => lineDataOut2
      );
   L1Writer3 : writer
      PORT MAP (
         DataOut     => DataOut,
         decodeOut   => lineSel(3),
         lineData    => line3,
         mwriteh_l   => mwriteh_l,
         mwritel_l   => mwritel_l,
         lineDataOut => lineDataOut3
      );
   L1Writer4 : writer
      PORT MAP (
         DataOut     => DataOut,
         decodeOut   => lineSel(4),
         lineData    => line4,
         mwriteh_l   => mwriteh_l,
         mwritel_l   => mwritel_l,
         lineDataOut => lineDataOut4
      );
   L1Writer5 : writer
      PORT MAP (
         DataOut     => DataOut,
         decodeOut   => lineSel(5),
         lineData    => line5,
         mwriteh_l   => mwriteh_l,
         mwritel_l   => mwritel_l,
         lineDataOut => lineDataOut5
      );
   L1Writer6 : writer
      PORT MAP (
         DataOut     => DataOut,
         decodeOut   => lineSel(6),
         lineData    => line6,
         mwriteh_l   => mwriteh_l,
         mwritel_l   => mwritel_l,
         lineDataOut => lineDataOut6
      );
   L1Writer7 : writer
      PORT MAP (
         DataOut     => DataOut,
         decodeOut   => lineSel(7),
         lineData    => line7,
         mwriteh_l   => mwriteh_l,
         mwritel_l   => mwritel_l,
         lineDataOut => lineDataOut7
      );

END struct;
