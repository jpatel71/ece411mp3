-- VHDL Entity ece411.LDISTIstate.interface
--
-- Created:
--          by - bjohns38.stdt (gllnx4.ews.illinois.edu)
--          at - 20:53:33 11/11/10
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2005.3 (Build 75)
--
LIBRARY ieee;
USE ieee.NUMERIC_STD.all;
USE ieee.std_logic_1164.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

ENTITY LDISTIstate IS
   PORT( 
      D_MRESP_H     : IN     std_logic;
      clk           : IN     std_logic;
      opcode_MEM    : IN     lc3b_opcode;
      MEMMUX_MEMSEL : OUT    std_logic;
      StallMEM      : OUT    std_logic
   );

-- Declarations

END LDISTIstate ;

--
-- VHDL Architecture ece411.LDISTIstate.fsm
--
-- Created:
--          by - bjohns38.stdt (gllnx4.ews.illinois.edu)
--          at - 20:53:33 11/11/10
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2005.3 (Build 75)
--
LIBRARY ieee;
USE ieee.NUMERIC_STD.all;
USE ieee.std_logic_1164.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;
 
ARCHITECTURE fsm OF LDISTIstate IS

   TYPE STATE_TYPE IS (
      LDI1,
      LDI2,
      Stall
   );
 
   -- State vector declaration
   ATTRIBUTE state_vector : string;
   ATTRIBUTE state_vector OF fsm : ARCHITECTURE IS "current_state";

   -- Declare current and next state signals
   SIGNAL current_state : STATE_TYPE;
   SIGNAL next_state : STATE_TYPE;

BEGIN

   -----------------------------------------------------------------
   clocked_proc : PROCESS ( 
      clk
   )
   -----------------------------------------------------------------
   BEGIN
      IF (clk'EVENT AND clk = '1') THEN
         current_state <= next_state;
      END IF;
   END PROCESS clocked_proc;
 
   -----------------------------------------------------------------
   nextstate_proc : PROCESS ( 
      D_MRESP_H,
      current_state,
      opcode_MEM
   )
   -----------------------------------------------------------------
   BEGIN
      CASE current_state IS
         WHEN LDI1 => 
            IF (D_MRESP_H='1') THEN 
               next_state <= LDI2;
            ELSE
               next_state <= LDI1;
            END IF;
         WHEN LDI2 => 
            IF (D_MRESP_H<='1') THEN 
               next_state <= Stall;
            ELSE
               next_state <= LDI2;
            END IF;
         WHEN Stall => 
            IF (OPcode_MEM=op_ldi) THEN 
               next_state <= LDI1;
            ELSE
               next_state <= Stall;
            END IF;
         WHEN OTHERS =>
            next_state <= Stall;
      END CASE;
   END PROCESS nextstate_proc;
 
   -----------------------------------------------------------------
   output_proc : PROCESS ( 
      current_state,
      opcode_MEM
   )
   -----------------------------------------------------------------
   BEGIN

      -- Combined Actions
      CASE current_state IS
         WHEN LDI1 => 
            MEMMUX_MEMSEL<='0';
            STALLMEM<='1';
         WHEN LDI2 => 
            MEMMUX_MEMSEL<='1';
            STALLMEM<='1';
         WHEN Stall => 
            if(opcode_MEM=op_ldi) then
            StallMEM<='1';
            else
            StallMEM<='0';
            end if;
            MEMMUX_MEMSEL<='0';
         WHEN OTHERS =>
            NULL;
      END CASE;
   END PROCESS output_proc;
 
END fsm;
