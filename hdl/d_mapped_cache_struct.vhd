-- VHDL Entity ece411.D_Mapped_Cache.symbol
--
-- Created:
--          by - jpatel71.stdt (dcllnx26.ews.illinois.edu)
--          at - 23:55:11 11/09/10
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2005.3 (Build 75)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

ENTITY D_Mapped_Cache IS
   PORT( 
      Address   : IN     lc3b_word;
      DataOut   : IN     lc3b_word;
      MREAD_L   : IN     std_logic;
      PMDATAIN  : IN     lc3b_oword;
      PMRESP_H  : IN     std_logic;
      clk       : IN     std_logic;
      mwriteh_l : IN     std_logic;
      mwritel_l : IN     std_logic;
      reset_l   : IN     std_logic;
      MRESP_H   : OUT    std_logic;
      PMADDRESS : OUT    lc3b_word;
      PMDATAOUT : OUT    lc3b_oword;
      PMREAD_L  : OUT    std_logic;
      PMWRITE_L : OUT    std_logic;
      datain    : OUT    lc3b_word
   );

-- Declarations

END D_Mapped_Cache ;

--
-- VHDL Architecture ece411.D_Mapped_Cache.struct
--
-- Created:
--          by - jpatel71.stdt (dcllnx26.ews.illinois.edu)
--          at - 23:55:12 11/09/10
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2005.3 (Build 75)
--
LIBRARY ieee;
USE ieee.NUMERIC_STD.all;
USE ieee.std_logic_1164.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

LIBRARY ece411;
LIBRARY mp3lib;

ARCHITECTURE struct OF D_Mapped_Cache IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL CacheDataIn  : lc3b_oword;
   SIGNAL F            : STD_LOGIC;
   SIGNAL F1           : STD_LOGIC;
   SIGNAL L1_Access    : STD_LOGIC;
   SIGNAL LoadWrite    : STD_LOGIC;
   SIGNAL PMWriteAddr  : LC3b_word;
   SIGNAL ValidOUT     : std_logic;
   SIGNAL cacheHit     : STD_LOGIC;
   SIGNAL cacheMiss    : STD_LOGIC;
   SIGNAL dWrite       : STD_LOGIC;
   SIGNAL dirty        : std_logic;
   SIGNAL dirtyIN      : STD_LOGIC;
   SIGNAL hitgate      : std_logic;
   SIGNAL in_idleHit   : STD_LOGIC;
   SIGNAL in_load      : std_logic;
   SIGNAL in_writeBack : STD_LOGIC;
   SIGNAL index        : lc3b_index6;
   SIGNAL match        : std_logic;
   SIGNAL miss         : STD_LOGIC;
   SIGNAL offset       : lc3b_offset;
   SIGNAL tag          : lc3b_l1tag;
   SIGNAL tagOUT       : lc3b_l1tag;
   SIGNAL wcData       : lc3b_oword;

   -- Implicit buffer signal declarations
   SIGNAL PMDATAOUT_internal : lc3b_oword;


   -- Component Declarations
   COMPONENT ADDRsplitter
   PORT (
      tag     : OUT    lc3b_l1tag ;
      index   : OUT    lc3b_index6 ;
      offset  : OUT    lc3b_offset ;
      Address : IN     lc3b_word 
   );
   END COMPONENT;
   COMPONENT AND4
   PORT (
      F1         : IN     STD_LOGIC ;
      cacheHit   : IN     STD_LOGIC ;
      hitgate    : IN     std_logic ;
      in_idleHit : IN     STD_LOGIC ;
      dWrite     : OUT    STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT AddrJoiner
   PORT (
      Index     : IN     LC3b_index6 ;
      tagMuxOut : IN     lc3b_l1tag ;
      b         : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT Buf1
   PORT (
      A : IN     STD_LOGIC ;
      F : OUT    STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT D_Mapped_Cache1k
   PORT (
      dataIN    : IN     lc3b_oword ;
      dirtyIN   : IN     std_logic ;
      index     : IN     lc3b_index6 ;
      reset_l   : IN     std_logic ;
      tagIN     : IN     lc3b_l1tag ;
      writeData : IN     std_logic ;
      ValidOUT  : OUT    std_logic ;
      dataOUT   : OUT    lc3b_oword ;
      dirtyOUT  : OUT    std_logic ;
      tagOUT    : OUT    lc3b_l1tag 
   );
   END COMPONENT;
   COMPONENT D_Mapped_Cache_Controller
   PORT (
      PMRESP_H     : IN     std_logic ;
      clk          : IN     std_logic ;
      dirty        : IN     std_logic ;
      miss         : IN     STD_LOGIC ;
      reset_l      : IN     std_logic ;
      PMREAD_L     : OUT    std_logic ;
      PMWRITE_L    : OUT    std_logic ;
      in_idleHit   : OUT    STD_LOGIC ;
      in_load      : OUT    std_logic ;
      in_writeBack : OUT    STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT L1TagCompare
   PORT (
      tag      : IN     lc3b_l1tag ;
      cacheTag : IN     lc3b_l1tag ;
      match    : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT delayClk
   PORT (
      Clk     : IN     std_logic ;
      hitgate : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT waySelecter
   PORT (
      a   : IN     lc3b_oword ;
      b   : IN     lc3b_oword ;
      sel : IN     std_logic ;
      f   : OUT    lc3b_oword 
   );
   END COMPONENT;
   COMPONENT wordSelecter
   PORT (
      offset         : IN     lc3b_offset ;
      DATAIN         : OUT    lc3b_word ;
      WaySelecterOut : IN     LC3B_oWORD 
   );
   END COMPONENT;
   COMPONENT writeCombiner
   PORT (
      DataOut        : IN     lc3b_word ;
      WaySelecterOut : IN     LC3B_oWORD ;
      mwriteh_l      : IN     std_logic ;
      mwritel_l      : IN     std_logic ;
      offset         : IN     lc3b_offset ;
      wcData         : OUT    lc3b_oword 
   );
   END COMPONENT;
   COMPONENT AND2
   PORT (
      A : IN     STD_LOGIC ;
      B : IN     STD_LOGIC ;
      F : OUT    STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT AND3
   PORT (
      A : IN     STD_LOGIC ;
      B : IN     STD_LOGIC ;
      C : IN     STD_LOGIC ;
      F : OUT    STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT MUX2_16
   PORT (
      A   : IN     LC3B_WORD ;
      B   : IN     LC3B_WORD ;
      SEL : IN     STD_LOGIC ;
      F   : OUT    LC3B_WORD 
   );
   END COMPONENT;
   COMPONENT NAND2
   PORT (
      A : IN     STD_LOGIC ;
      B : IN     STD_LOGIC ;
      F : OUT    STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT NAND3
   PORT (
      A : IN     STD_LOGIC ;
      B : IN     STD_LOGIC ;
      C : IN     STD_LOGIC ;
      F : OUT    STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT NOT1
   PORT (
      A : IN     STD_LOGIC ;
      F : OUT    STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT OR2
   PORT (
      A : IN     STD_LOGIC ;
      B : IN     STD_LOGIC ;
      F : OUT    STD_LOGIC 
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : ADDRsplitter USE ENTITY ece411.ADDRsplitter;
   FOR ALL : AND2 USE ENTITY mp3lib.AND2;
   FOR ALL : AND3 USE ENTITY mp3lib.AND3;
   FOR ALL : AND4 USE ENTITY ece411.AND4;
   FOR ALL : AddrJoiner USE ENTITY ece411.AddrJoiner;
   FOR ALL : Buf1 USE ENTITY ece411.Buf1;
   FOR ALL : D_Mapped_Cache1k USE ENTITY ece411.D_Mapped_Cache1k;
   FOR ALL : D_Mapped_Cache_Controller USE ENTITY ece411.D_Mapped_Cache_Controller;
   FOR ALL : L1TagCompare USE ENTITY ece411.L1TagCompare;
   FOR ALL : MUX2_16 USE ENTITY mp3lib.MUX2_16;
   FOR ALL : NAND2 USE ENTITY mp3lib.NAND2;
   FOR ALL : NAND3 USE ENTITY mp3lib.NAND3;
   FOR ALL : NOT1 USE ENTITY mp3lib.NOT1;
   FOR ALL : OR2 USE ENTITY mp3lib.OR2;
   FOR ALL : delayClk USE ENTITY ece411.delayClk;
   FOR ALL : waySelecter USE ENTITY ece411.waySelecter;
   FOR ALL : wordSelecter USE ENTITY ece411.wordSelecter;
   FOR ALL : writeCombiner USE ENTITY ece411.writeCombiner;
   -- pragma synthesis_on


BEGIN

   -- Instance port mappings.
   aADDRsplitter : ADDRsplitter
      PORT MAP (
         tag     => tag,
         index   => index,
         offset  => offset,
         Address => Address
      );
   U_1 : AND4
      PORT MAP (
         F1         => F1,
         cacheHit   => cacheHit,
         hitgate    => hitgate,
         in_idleHit => in_idleHit,
         dWrite     => dWrite
      );
   L1_AddrJoiner : AddrJoiner
      PORT MAP (
         Index     => index,
         tagMuxOut => tagOUT,
         b         => PMWriteAddr
      );
   aBuf1 : Buf1
      PORT MAP (
         A => dWrite,
         F => dirtyIN
      );
   aD_Mapped_Cache1k : D_Mapped_Cache1k
      PORT MAP (
         dataIN    => CacheDataIn,
         dirtyIN   => dirtyIN,
         index     => index,
         reset_l   => reset_l,
         tagIN     => tag,
         writeData => F,
         ValidOUT  => ValidOUT,
         dataOUT   => PMDATAOUT_internal,
         dirtyOUT  => dirty,
         tagOUT    => tagOUT
      );
   D_Mapped_Controller : D_Mapped_Cache_Controller
      PORT MAP (
         PMRESP_H     => PMRESP_H,
         clk          => clk,
         dirty        => dirty,
         miss         => miss,
         reset_l      => reset_l,
         PMREAD_L     => PMREAD_L,
         PMWRITE_L    => PMWRITE_L,
         in_idleHit   => in_idleHit,
         in_load      => in_load,
         in_writeBack => in_writeBack
      );
   aL1TagCompare : L1TagCompare
      PORT MAP (
         tag      => tag,
         cacheTag => tagOUT,
         match    => match
      );
   L1_DClk : delayClk
      PORT MAP (
         Clk     => clk,
         hitgate => hitgate
      );
   L1DataSelector : waySelecter
      PORT MAP (
         a   => wcData,
         b   => PMDATAIN,
         sel => LoadWrite,
         f   => CacheDataIn
      );
   aWordSelect : wordSelecter
      PORT MAP (
         offset         => offset,
         DATAIN         => datain,
         WaySelecterOut => PMDATAOUT_internal
      );
   aWriteCombiner : writeCombiner
      PORT MAP (
         DataOut        => DataOut,
         WaySelecterOut => PMDATAOUT_internal,
         mwriteh_l      => mwriteh_l,
         mwritel_l      => mwritel_l,
         offset         => offset,
         wcData         => wcData
      );
   L1_Miss : AND2
      PORT MAP (
         A => cacheMiss,
         B => L1_Access,
         F => miss
      );
   U_2 : AND2
      PORT MAP (
         A => in_load,
         B => PMRESP_H,
         F => LoadWrite
      );
   ValidCheck : AND2
      PORT MAP (
         A => match,
         B => ValidOUT,
         F => cacheHit
      );
   L1_Hit : AND3
      PORT MAP (
         A => in_idleHit,
         B => cacheHit,
         C => hitgate,
         F => MRESP_H
      );
   PMADDRSEL : MUX2_16
      PORT MAP (
         A   => Address,
         B   => PMWriteAddr,
         SEL => in_writeBack,
         F   => PMADDRESS
      );
   U_0 : NAND2
      PORT MAP (
         A => mwriteh_l,
         B => mwritel_l,
         F => F1
      );
   L1Access : NAND3
      PORT MAP (
         A => mwriteh_l,
         B => mwritel_l,
         C => MREAD_L,
         F => L1_Access
      );
   nothit : NOT1
      PORT MAP (
         A => cacheHit,
         F => cacheMiss
      );
   WDSignal : OR2
      PORT MAP (
         A => dWrite,
         B => LoadWrite,
         F => F
      );

   -- Implicit buffered output assignments
   PMDATAOUT <= PMDATAOUT_internal;

END struct;
