--
-- COMPONENT : LC3B_TYPES
--
-- GENERATED BY SYSTEM ARCHITECT VERSION V8.4_3.7
-- EDITED BY MATT ZAVISLAK FOR ECE 312 MP3 ON NOVEMBER 10, 2000
-- VERSION 2.0
-- EDITED BY DANIEL MANJARRES FOR ECE 411 JANUARY 2010
--
LIBRARY IEEE ;
USE IEEE.STD_LOGIC_1164.ALL;

PACKAGE LC3B_TYPES IS
-- DATAPATH SIGNAL WIDTHS
	SUBTYPE LC3B_PWORD IS STD_LOGIC_VECTOR (255 DOWNTO 0);  --"POLY" WORD
	SUBTYPE LC3B_OWORD IS STD_LOGIC_VECTOR (127 DOWNTO 0);  --OCTAL WORD
	SUBTYPE LC3B_QWORD IS STD_LOGIC_VECTOR (63 DOWNTO 0);  --QUAD WORD
	SUBTYPE LC3B_DWORD IS STD_LOGIC_VECTOR(31 DOWNTO 0);  --DOUBLE WORD
	SUBTYPE LC3B_WORD IS STD_LOGIC_VECTOR(15 DOWNTO 0);
	SUBTYPE LC3B_BYTE IS STD_LOGIC_VECTOR(7 DOWNTO 0);
	SUBTYPE LC3B_NIBBLE IS STD_LOGIC_VECTOR(3 DOWNTO 0);
	SUBTYPE LC3B_CC IS STD_LOGIC_VECTOR(2 DOWNTO 0);
	SUBTYPE LC3B_NZP IS STD_LOGIC_VECTOR(2 DOWNTO 0);
	SUBTYPE LC3B_REG IS STD_LOGIC_VECTOR(2 DOWNTO 0);
	SUBTYPE LC3B_ALUOP IS STD_LOGIC_VECTOR(2 DOWNTO 0);
	SUBTYPE LC3B_SHFTOP IS STD_LOGIC_VECTOR(1 DOWNTO 0);
	SUBTYPE LC3B_IMM4 IS STD_LOGIC_VECTOR(3 DOWNTO 0);
	SUBTYPE LC3B_IMM5 IS STD_LOGIC_VECTOR(4 DOWNTO 0);
	SUBTYPE LC3B_OFFSET9 IS STD_LOGIC_VECTOR(8 DOWNTO 0);
	--SUBTYPE LC3B_INDEX6 IS STD_LOGIC_VECTOR(5 DOWNTO 0);
	SUBTYPE LC3B_TRAPVECT8 IS STD_LOGIC_VECTOR(7 DOWNTO 0);
	SUBTYPE LC3B_OFFSET11 IS STD_LOGIC_VECTOR(10 DOWNTO 0);
	SUBTYPE LC3B_OPCODE IS STD_LOGIC_VECTOR(3 DOWNTO 0);
	SUBTYPE LC3B_4MUX_SEL IS STD_LOGIC_VECTOR(1 DOWNTO 0);
	SUBTYPE LC3B_8MUX_SEL IS STD_LOGIC_VECTOR(2 DOWNTO 0);
	SUBTYPE LC3B_3DECODE IS STD_LOGIC_VECTOR(2 DOWNTO 0);
	SUBTYPE LC3B_shfop IS STD_LOGIC_VECTOR(1 DOWNTO 0);
	--MP2.2 Stuff
	SUBTYPE LC3B_INDEX IS STD_LOGIC_VECTOR(2 DOWNTO 0);
	SUBTYPE LC3B_TAG IS STD_LOGIC_VECTOR(8 DOWNTO 0);
	SUBTYPE LC3B_OFFSET IS STD_LOGIC_VECTOR(3 DOWNTO 0);
  --MP3 Types
  SUBTYPE LC3B_CONTROLWORD IS STD_LOGIC_VECTOR(23 DOWNTO 0);
  SUBTYPE LC3B_INDEX6 IS STD_LOGIC_VECTOR(5 DOWNTO 0);
  SUBTYPE LC3B_L1TAG IS STD_LOGIC_VECTOR(5 DOWNTO 0);
  
	TYPE MEMORY_ARRAY_64K IS ARRAY (0 TO 65535) OF LC3B_BYTE;
	
	-- ALU OP DEFINITIONS
	CONSTANT ALU_ADD      : LC3B_ALUOP := "000";
	CONSTANT ALU_AND      : LC3B_ALUOP := "001";
	CONSTANT ALU_NOT      : LC3B_ALUOP := "010";
	CONSTANT ALU_PASS     : LC3B_ALUOP := "011";
	CONSTANT ALU_SLL      : LC3B_ALUOP := "100";
	CONSTANT ALU_SRL      : LC3B_ALUOP := "110";
	CONSTANT ALU_SRA      : LC3B_ALUOP := "111";

	-- SHIFTER OP DEFINITIONS
	CONSTANT SHFT_SLL     : LC3B_SHFTOP := "00";
	CONSTANT SHFT_SLL2     : LC3B_SHFTOP := "10";
	CONSTANT SHFT_SRL     : LC3B_SHFTOP := "01";
	CONSTANT SHFT_SRA     : LC3B_SHFTOP := "11";

	-- INSTRUCTION DEFINITIONS
	CONSTANT OP_ADD       : LC3B_OPCODE := "0001";
	CONSTANT OP_AND       : LC3B_OPCODE := "0101";
	CONSTANT OP_BR        : LC3B_OPCODE := "0000";
	CONSTANT OP_JSR       : LC3B_OPCODE := "0100";
	CONSTANT OP_JMP       : LC3B_OPCODE := "1100";
	CONSTANT OP_LDR       : LC3B_OPCODE := "0110";
	CONSTANT OP_LDB       : LC3B_OPCODE := "0010";
	CONSTANT OP_LDI       : LC3B_OPCODE := "1010";
	CONSTANT OP_LEA       : LC3B_OPCODE := "1110";
	CONSTANT OP_NOT       : LC3B_OPCODE := "1001";
	CONSTANT OP_RET       : LC3B_OPCODE := "1100";
	CONSTANT OP_RTI       : LC3B_OPCODE := "1000";
	CONSTANT OP_SHF       : LC3B_OPCODE := "1101";
	CONSTANT OP_STR       : LC3B_OPCODE := "0111";
	CONSTANT OP_STB       : LC3B_OPCODE := "0011";
	CONSTANT OP_STI       : LC3B_OPCODE := "1011";
	CONSTANT OP_TRAP      : LC3B_OPCODE := "1111";

	-- TIME DELAYS **********
	-- CHANGED FOR FALL 2009: ALU, ADDER, SHIFTER DELAYS
	--CONSTANT DELAY_ALU : TIME := 34 NS;
	--CONSTANT DELAY_ADDER : TIME := 32 NS;
	--CONSTANT DELAY_SHIFTER : TIME := 20 NS;
	CONSTANT HALF_CLOCK_PERIOD : TIME := 20 NS;
	CONSTANT CLOCK_PERIOD : TIME := (HALF_CLOCK_PERIOD + HALF_CLOCK_PERIOD);
	CONSTANT DELAY_GENCC : TIME := 6 NS;
	CONSTANT DELAY_ALU : TIME := 15 NS;
	CONSTANT DELAY_ADDER : TIME := 12 NS;
	CONSTANT DELAY_SHIFTER : TIME := 10 NS;
	CONSTANT DELAY_REGFILE_READ : TIME := 7 NS;
	CONSTANT DELAY_REGFILE_READ2 : TIME := 11 NS;
	CONSTANT DELAY_REG : TIME := 5 NS;
	CONSTANT DELAY_LOGIC : TIME := 1 NS;
	CONSTANT DELAY_MUX2 : TIME := 1 NS;
	CONSTANT DELAY_MUX4 : TIME := 2 NS;
	CONSTANT DELAY_MUX8 : TIME := 3 NS;
	CONSTANT DELAY_DECODE3 : TIME := 3 NS;
	CONSTANT DELAY_COMPARE8 : TIME := 3 NS;
	CONSTANT DELAY_COMPARE16 : TIME := 4 NS;
	--MP2.2 Stuff
	CONSTANT DELAY_COMPARATOR : TIME := 5 NS;
	CONSTANT DELAY_DECODER : TIME := 2 NS;
	CONSTANT DELAY_LOGIC4  : TIME := 2 NS;
  --MP3
  CONSTANT delay_control : TIME := 5 NS;
	--DELAYS FOR DATA ARRAYS
	CONSTANT DELAY_128B_SINGLE : TIME := 7 NS;
	CONSTANT DELAY_128B_DUAL : TIME := 10 NS;
	CONSTANT DELAY_256B_SINGLE : TIME := 10 NS;
	CONSTANT DELAY_256B_DUAL : TIME := 13 NS;
	CONSTANT DELAY_512B_SINGLE : TIME := 15 NS;
	CONSTANT DELAY_512B_DUAL : TIME := 20 NS;
	CONSTANT DELAY_1KB_SINGLE : TIME := 25 NS;
	CONSTANT DELAY_1KB_DUAL : TIME := 30 NS;
	CONSTANT DELAY_2KB_SINGLE : TIME := 40 NS;
	CONSTANT DELAY_2KB_DUAL : TIME := 45 NS;
	CONSTANT DELAY_4KB_SINGLE : TIME := 60 NS;
	CONSTANT DELAY_4KB_DUAL : TIME := 65 NS;

	--DELAY FOR CONTROL ROM
	CONSTANT DELAY_ROM : TIME := 3 NS;
	
	--DELAYS FOR DRAM.
	CONSTANT DELAY_MP1_MEM : TIME := 50 NS;
	CONSTANT DELAY_MP2_MEM : TIME := 500 NS;
	CONSTANT DELAY_MP22_MEM : TIME := 500 NS;
	CONSTANT DELAY_16B_MEM : TIME := 500 NS;
	CONSTANT DELAY_32B_MEM : TIME := 510 NS;
	CONSTANT DELAY_64B_MEM : TIME := 530 NS;
	CONSTANT DELAY_128B_MEM : TIME := 570 NS;
	CONSTANT DELAY_256B_MEM : TIME := 650 NS;
      
	PROCEDURE MYDRAMINIT_64K (
		VARIABLE MEM : OUT MEMORY_ARRAY_64K);

END LC3B_TYPES ;

PACKAGE BODY LC3B_TYPES IS

	PROCEDURE MYDRAMINIT_64K (
		VARIABLE MEM : OUT MEMORY_ARRAY_64K) IS
		BEGIN  -- MYDRAMINIT

	    -- USE THE DOIFY.SH SCRIPT TO LOAD PROGRAMS INTO MEMORY, OR 
	    -- INSERT YOUR MEMORY VECTORS HERE.
	    -- EXAMPLE: MEM(0) := TO_STDLOGICVECTOR(X"00");
	    mem(0) := To_stdlogicvector(X"13");
	mem(1) := To_stdlogicvector(X"62");
	mem(2) := To_stdlogicvector(X"0D");
	mem(3) := To_stdlogicvector(X"48");
	mem(4) := To_stdlogicvector(X"14");
	mem(5) := To_stdlogicvector(X"66");
	mem(6) := To_stdlogicvector(X"C0");
	mem(7) := To_stdlogicvector(X"40");
	mem(8) := To_stdlogicvector(X"FF");
	mem(9) := To_stdlogicvector(X"0F");
	mem(10) := To_stdlogicvector(X"00");
	mem(11) := To_stdlogicvector(X"10");
	mem(12) := To_stdlogicvector(X"00");
	mem(13) := To_stdlogicvector(X"10");
	mem(14) := To_stdlogicvector(X"00");
	mem(15) := To_stdlogicvector(X"10");
	mem(16) := To_stdlogicvector(X"00");
	mem(17) := To_stdlogicvector(X"10");
	mem(18) := To_stdlogicvector(X"00");
	mem(19) := To_stdlogicvector(X"10");
	mem(20) := To_stdlogicvector(X"00");
	mem(21) := To_stdlogicvector(X"10");
	mem(22) := To_stdlogicvector(X"00");
	mem(23) := To_stdlogicvector(X"10");
	mem(24) := To_stdlogicvector(X"00");
	mem(25) := To_stdlogicvector(X"10");
	mem(26) := To_stdlogicvector(X"00");
	mem(27) := To_stdlogicvector(X"10");
	mem(28) := To_stdlogicvector(X"00");
	mem(29) := To_stdlogicvector(X"10");
	mem(30) := To_stdlogicvector(X"13");
	mem(31) := To_stdlogicvector(X"64");
	mem(32) := To_stdlogicvector(X"C0");
	mem(33) := To_stdlogicvector(X"C1");
	mem(34) := To_stdlogicvector(X"13");
	mem(35) := To_stdlogicvector(X"68");
	mem(36) := To_stdlogicvector(X"C0");
	mem(37) := To_stdlogicvector(X"C1");
	mem(38) := To_stdlogicvector(X"01");
	mem(39) := To_stdlogicvector(X"00");
	mem(40) := To_stdlogicvector(X"23");
	mem(41) := To_stdlogicvector(X"00");
	
		--MAKE NO CHANGES AFTER THIS LINE.
	END MYDRAMINIT_64K;

END LC3B_TYPES;
