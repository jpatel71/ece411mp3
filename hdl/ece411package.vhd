--
-- COMPONENT : LC3B_TYPES
--
-- GENERATED BY SYSTEM ARCHITECT VERSION V8.4_3.7
-- EDITED BY MATT ZAVISLAK FOR ECE 312 MP3 ON NOVEMBER 10, 2000
-- VERSION 2.0
-- EDITED BY DANIEL MANJARRES FOR ECE 411 JANUARY 2010
--
LIBRARY IEEE ;
USE IEEE.STD_LOGIC_1164.ALL;

PACKAGE LC3B_TYPES IS
-- DATAPATH SIGNAL WIDTHS
	SUBTYPE LC3B_PWORD IS STD_LOGIC_VECTOR (255 DOWNTO 0);  --"POLY" WORD
	SUBTYPE LC3B_OWORD IS STD_LOGIC_VECTOR (127 DOWNTO 0);  --OCTAL WORD
	SUBTYPE LC3B_QWORD IS STD_LOGIC_VECTOR (63 DOWNTO 0);  --QUAD WORD
	SUBTYPE LC3B_DWORD IS STD_LOGIC_VECTOR(31 DOWNTO 0);  --DOUBLE WORD
	SUBTYPE LC3B_WORD IS STD_LOGIC_VECTOR(15 DOWNTO 0);
	SUBTYPE LC3B_BYTE IS STD_LOGIC_VECTOR(7 DOWNTO 0);
	SUBTYPE LC3B_NIBBLE IS STD_LOGIC_VECTOR(3 DOWNTO 0);
	SUBTYPE LC3B_CC IS STD_LOGIC_VECTOR(2 DOWNTO 0);
	SUBTYPE LC3B_NZP IS STD_LOGIC_VECTOR(2 DOWNTO 0);
	SUBTYPE LC3B_REG IS STD_LOGIC_VECTOR(2 DOWNTO 0);
	SUBTYPE LC3B_ALUOP IS STD_LOGIC_VECTOR(2 DOWNTO 0);
	SUBTYPE LC3B_SHFTOP IS STD_LOGIC_VECTOR(1 DOWNTO 0);
	SUBTYPE LC3B_IMM4 IS STD_LOGIC_VECTOR(3 DOWNTO 0);
	SUBTYPE LC3B_IMM5 IS STD_LOGIC_VECTOR(4 DOWNTO 0);
	SUBTYPE LC3B_OFFSET9 IS STD_LOGIC_VECTOR(8 DOWNTO 0);
	--SUBTYPE LC3B_INDEX6 IS STD_LOGIC_VECTOR(5 DOWNTO 0);
	SUBTYPE LC3B_TRAPVECT8 IS STD_LOGIC_VECTOR(7 DOWNTO 0);
	SUBTYPE LC3B_OFFSET11 IS STD_LOGIC_VECTOR(10 DOWNTO 0);
	SUBTYPE LC3B_OPCODE IS STD_LOGIC_VECTOR(3 DOWNTO 0);
	SUBTYPE LC3B_4MUX_SEL IS STD_LOGIC_VECTOR(1 DOWNTO 0);
	SUBTYPE LC3B_8MUX_SEL IS STD_LOGIC_VECTOR(2 DOWNTO 0);
	SUBTYPE LC3B_3DECODE IS STD_LOGIC_VECTOR(2 DOWNTO 0);
	SUBTYPE LC3B_shfop IS STD_LOGIC_VECTOR(1 DOWNTO 0);
	--MP2.2 Stuff
	SUBTYPE LC3B_INDEX IS STD_LOGIC_VECTOR(2 DOWNTO 0);
	SUBTYPE LC3B_TAG IS STD_LOGIC_VECTOR(8 DOWNTO 0);
	SUBTYPE LC3B_OFFSET IS STD_LOGIC_VECTOR(3 DOWNTO 0);
  --MP3 Types
  SUBTYPE LC3B_CONTROLWORD IS STD_LOGIC_VECTOR(15 DOWNTO 0);
  SUBTYPE LC3B_INDEX6 IS STD_LOGIC_VECTOR(5 DOWNTO 0);
  SUBTYPE LC3B_L1TAG IS STD_LOGIC_VECTOR(5 DOWNTO 0);
  
	TYPE MEMORY_ARRAY_64K IS ARRAY (0 TO 65535) OF LC3B_BYTE;
	
	-- ALU OP DEFINITIONS
	CONSTANT ALU_ADD      : LC3B_ALUOP := "000";
	CONSTANT ALU_AND      : LC3B_ALUOP := "001";
	CONSTANT ALU_NOT      : LC3B_ALUOP := "010";
	CONSTANT ALU_PASS     : LC3B_ALUOP := "011";
	CONSTANT ALU_SLL      : LC3B_ALUOP := "100";
	CONSTANT ALU_SRL      : LC3B_ALUOP := "110";
	CONSTANT ALU_SRA      : LC3B_ALUOP := "111";

	-- SHIFTER OP DEFINITIONS
	CONSTANT SHFT_SLL     : LC3B_SHFTOP := "00";
	CONSTANT SHFT_SRL     : LC3B_SHFTOP := "01";
	CONSTANT SHFT_SRA     : LC3B_SHFTOP := "11";

	-- INSTRUCTION DEFINITIONS
	CONSTANT OP_ADD       : LC3B_OPCODE := "0001";
	CONSTANT OP_AND       : LC3B_OPCODE := "0101";
	CONSTANT OP_BR        : LC3B_OPCODE := "0000";
	CONSTANT OP_JSR       : LC3B_OPCODE := "0100";
	CONSTANT OP_JMP       : LC3B_OPCODE := "1100";
	CONSTANT OP_LDR       : LC3B_OPCODE := "0110";
	CONSTANT OP_LDB       : LC3B_OPCODE := "0010";
	CONSTANT OP_LDI       : LC3B_OPCODE := "1010";
	CONSTANT OP_LEA       : LC3B_OPCODE := "1110";
	CONSTANT OP_NOT       : LC3B_OPCODE := "1001";
	CONSTANT OP_RET       : LC3B_OPCODE := "1100";
	CONSTANT OP_RTI       : LC3B_OPCODE := "1000";
	CONSTANT OP_SHF       : LC3B_OPCODE := "1101";
	CONSTANT OP_STR       : LC3B_OPCODE := "0111";
	CONSTANT OP_STB       : LC3B_OPCODE := "0011";
	CONSTANT OP_STI       : LC3B_OPCODE := "1011";
	CONSTANT OP_TRAP      : LC3B_OPCODE := "1111";

	-- TIME DELAYS **********
	-- CHANGED FOR FALL 2009: ALU, ADDER, SHIFTER DELAYS
	--CONSTANT DELAY_ALU : TIME := 34 NS;
	--CONSTANT DELAY_ADDER : TIME := 32 NS;
	--CONSTANT DELAY_SHIFTER : TIME := 20 NS;
	CONSTANT HALF_CLOCK_PERIOD : TIME := 25 NS;
	CONSTANT CLOCK_PERIOD : TIME := (HALF_CLOCK_PERIOD + HALF_CLOCK_PERIOD);
	CONSTANT DELAY_GENCC : TIME := 6 NS;
	CONSTANT DELAY_ALU : TIME := 15 NS;
	CONSTANT DELAY_ADDER : TIME := 12 NS;
	CONSTANT DELAY_SHIFTER : TIME := 10 NS;
	CONSTANT DELAY_REGFILE_READ : TIME := 7 NS;
	CONSTANT DELAY_REGFILE_READ2 : TIME := 11 NS;
	CONSTANT DELAY_REG : TIME := 5 NS;
	CONSTANT DELAY_LOGIC : TIME := 1 NS;
	CONSTANT DELAY_MUX2 : TIME := 1 NS;
	CONSTANT DELAY_MUX4 : TIME := 2 NS;
	CONSTANT DELAY_MUX8 : TIME := 3 NS;
	CONSTANT DELAY_DECODE3 : TIME := 3 NS;
	CONSTANT DELAY_COMPARE8 : TIME := 3 NS;
	CONSTANT DELAY_COMPARE16 : TIME := 4 NS;
	--MP2.2 Stuff
	CONSTANT DELAY_COMPARATOR : TIME := 5 NS;
	CONSTANT DELAY_DECODER : TIME := 2 NS;
	CONSTANT DELAY_LOGIC4  : TIME := 2 NS;
  --MP3
  CONSTANT delay_control : TIME := 5 NS;
	--DELAYS FOR DATA ARRAYS
	CONSTANT DELAY_128B_SINGLE : TIME := 7 NS;
	CONSTANT DELAY_128B_DUAL : TIME := 10 NS;
	CONSTANT DELAY_256B_SINGLE : TIME := 10 NS;
	CONSTANT DELAY_256B_DUAL : TIME := 13 NS;
	CONSTANT DELAY_512B_SINGLE : TIME := 15 NS;
	CONSTANT DELAY_512B_DUAL : TIME := 20 NS;
	CONSTANT DELAY_1KB_SINGLE : TIME := 25 NS;
	CONSTANT DELAY_1KB_DUAL : TIME := 30 NS;
	CONSTANT DELAY_2KB_SINGLE : TIME := 40 NS;
	CONSTANT DELAY_2KB_DUAL : TIME := 45 NS;
	CONSTANT DELAY_4KB_SINGLE : TIME := 60 NS;
	CONSTANT DELAY_4KB_DUAL : TIME := 65 NS;

	--DELAY FOR CONTROL ROM
	CONSTANT DELAY_ROM : TIME := 3 NS;
	
	--DELAYS FOR DRAM.
	CONSTANT DELAY_MP1_MEM : TIME := 50 NS;
	CONSTANT DELAY_MP2_MEM : TIME := 500 NS;
	CONSTANT DELAY_MP22_MEM : TIME := 500 NS;
	CONSTANT DELAY_16B_MEM : TIME := 500 NS;
	CONSTANT DELAY_32B_MEM : TIME := 510 NS;
	CONSTANT DELAY_64B_MEM : TIME := 530 NS;
	CONSTANT DELAY_128B_MEM : TIME := 570 NS;
	CONSTANT DELAY_256B_MEM : TIME := 650 NS;
      
	PROCEDURE MYDRAMINIT_64K (
		VARIABLE MEM : OUT MEMORY_ARRAY_64K);

END LC3B_TYPES ;

PACKAGE BODY LC3B_TYPES IS

	PROCEDURE MYDRAMINIT_64K (
		VARIABLE MEM : OUT MEMORY_ARRAY_64K) IS
		BEGIN  -- MYDRAMINIT

	    -- USE THE DOIFY.SH SCRIPT TO LOAD PROGRAMS INTO MEMORY, OR 
	    -- INSERT YOUR MEMORY VECTORS HERE.
	    -- EXAMPLE: MEM(0) := TO_STDLOGICVECTOR(X"00");
	    
		mem(0) := To_stdlogicvector(X"12");
	  mem(1) := To_stdlogicvector(X"62");
	  mem(2) := To_stdlogicvector(X"13");
	  mem(3) := To_stdlogicvector(X"64");
	  mem(4) := To_stdlogicvector(X"14");
	  mem(5) := To_stdlogicvector(X"68");
	  mem(6) := To_stdlogicvector(X"00");
	  mem(7) := To_stdlogicvector(X"00");
	  mem(8) := To_stdlogicvector(X"00");
	  mem(9) := To_stdlogicvector(X"00");
	  mem(10) := To_stdlogicvector(X"00");
	  mem(11) := To_stdlogicvector(X"00");
	  mem(12) := To_stdlogicvector(X"00");
	  mem(13) := To_stdlogicvector(X"00");
	  mem(14) := To_stdlogicvector(X"00");
	  mem(15) := To_stdlogicvector(X"00");
	  mem(16) := To_stdlogicvector(X"00");
	  mem(17) := To_stdlogicvector(X"00");
	  mem(18) := To_stdlogicvector(X"00");
	  mem(19) := To_stdlogicvector(X"00");
	  mem(20) := To_stdlogicvector(X"0D");
	  mem(21) := To_stdlogicvector(X"0E");
	  mem(22) := To_stdlogicvector(X"00");
	  mem(23) := To_stdlogicvector(X"00");
	  mem(24) := To_stdlogicvector(X"00");
	  mem(25) := To_stdlogicvector(X"00");
	  mem(26) := To_stdlogicvector(X"00");
	  mem(27) := To_stdlogicvector(X"00");
	  mem(28) := To_stdlogicvector(X"00");
	  mem(29) := To_stdlogicvector(X"00");
	  mem(30) := To_stdlogicvector(X"00");
	  mem(31) := To_stdlogicvector(X"00");
	  mem(32) := To_stdlogicvector(X"00");
	  mem(33) := To_stdlogicvector(X"00");
	  mem(34) := To_stdlogicvector(X"00");
	  mem(35) := To_stdlogicvector(X"00");
	  mem(36) := To_stdlogicvector(X"01");
	  mem(37) := To_stdlogicvector(X"00");
	  mem(38) := To_stdlogicvector(X"02");
	  mem(39) := To_stdlogicvector(X"00");
	  mem(40) := To_stdlogicvector(X"FF");
	  mem(41) := To_stdlogicvector(X"FF");
	  mem(42) := To_stdlogicvector(X"01");
	  mem(43) := To_stdlogicvector(X"00");
	  mem(44) := To_stdlogicvector(X"0D");
	  mem(45) := To_stdlogicvector(X"60");
	  mem(46) := To_stdlogicvector(X"DD");
	  mem(47) := To_stdlogicvector(X"BA");
	  mem(48) := To_stdlogicvector(X"42");
	  mem(49) := To_stdlogicvector(X"16");
	  mem(50) := To_stdlogicvector(X"82");
	  mem(51) := To_stdlogicvector(X"5A");
	  mem(52) := To_stdlogicvector(X"7F");
	  mem(53) := To_stdlogicvector(X"9C");
	  mem(54) := To_stdlogicvector(X"00");
	  mem(55) := To_stdlogicvector(X"00");
	  mem(56) := To_stdlogicvector(X"00");
	  mem(57) := To_stdlogicvector(X"00");
	  mem(58) := To_stdlogicvector(X"00");
	  mem(59) := To_stdlogicvector(X"00");
	  mem(60) := To_stdlogicvector(X"00");
	  mem(61) := To_stdlogicvector(X"00");
	  mem(62) := To_stdlogicvector(X"00");
	  mem(63) := To_stdlogicvector(X"00");
	  mem(64) := To_stdlogicvector(X"00");
	  mem(65) := To_stdlogicvector(X"00");
	  mem(66) := To_stdlogicvector(X"00");
	  mem(67) := To_stdlogicvector(X"00");
	  mem(68) := To_stdlogicvector(X"15");
	  mem(69) := To_stdlogicvector(X"7C");
	  mem(70) := To_stdlogicvector(X"15");
	  mem(71) := To_stdlogicvector(X"6E");
	  mem(72) := To_stdlogicvector(X"44");
	  mem(73) := To_stdlogicvector(X"12");
	  mem(74) := To_stdlogicvector(X"00");
	  mem(75) := To_stdlogicvector(X"00");
	  mem(76) := To_stdlogicvector(X"00");
	  mem(77) := To_stdlogicvector(X"00");
	  mem(78) := To_stdlogicvector(X"00");
	  mem(79) := To_stdlogicvector(X"00");
	  mem(80) := To_stdlogicvector(X"00");
	  mem(81) := To_stdlogicvector(X"00");
	  mem(82) := To_stdlogicvector(X"00");
	  mem(83) := To_stdlogicvector(X"00");
	  mem(84) := To_stdlogicvector(X"00");
	  mem(85) := To_stdlogicvector(X"00");
	  mem(86) := To_stdlogicvector(X"00");
	  mem(87) := To_stdlogicvector(X"00");
	  mem(88) := To_stdlogicvector(X"18");
	  mem(89) := To_stdlogicvector(X"08");
	  mem(90) := To_stdlogicvector(X"00");
	  mem(91) := To_stdlogicvector(X"00");
	  mem(92) := To_stdlogicvector(X"00");
	  mem(93) := To_stdlogicvector(X"00");
	  mem(94) := To_stdlogicvector(X"00");
	  mem(95) := To_stdlogicvector(X"00");
	  mem(96) := To_stdlogicvector(X"00");
	  mem(97) := To_stdlogicvector(X"00");
	  mem(98) := To_stdlogicvector(X"00");
	  mem(99) := To_stdlogicvector(X"00");
	  mem(100) := To_stdlogicvector(X"00");
	  mem(101) := To_stdlogicvector(X"00");
	  mem(102) := To_stdlogicvector(X"00");
	  mem(103) := To_stdlogicvector(X"00");
	  mem(104) := To_stdlogicvector(X"E3");
	  mem(105) := To_stdlogicvector(X"0F");
	  mem(106) := To_stdlogicvector(X"00");
	  mem(107) := To_stdlogicvector(X"00");
	  mem(108) := To_stdlogicvector(X"00");
	  mem(109) := To_stdlogicvector(X"00");
	  mem(110) := To_stdlogicvector(X"00");
	  mem(111) := To_stdlogicvector(X"00");
	  mem(112) := To_stdlogicvector(X"00");
	  mem(113) := To_stdlogicvector(X"00");
	  mem(114) := To_stdlogicvector(X"00");
	  mem(115) := To_stdlogicvector(X"00");
	  mem(116) := To_stdlogicvector(X"00");
	  mem(117) := To_stdlogicvector(X"00");
	  mem(118) := To_stdlogicvector(X"00");
	  mem(119) := To_stdlogicvector(X"00");
	  mem(120) := To_stdlogicvector(X"17");
	  mem(121) := To_stdlogicvector(X"62");
	  mem(122) := To_stdlogicvector(X"FE");
	  mem(123) := To_stdlogicvector(X"0F");
	  mem(124) := To_stdlogicvector(X"00");
	  mem(125) := To_stdlogicvector(X"00");
	  mem(126) := To_stdlogicvector(X"00");
	  mem(127) := To_stdlogicvector(X"00");
	  mem(128) := To_stdlogicvector(X"00");
	  mem(129) := To_stdlogicvector(X"00");
	  mem(130) := To_stdlogicvector(X"00");
	  mem(131) := To_stdlogicvector(X"00");
	  mem(132) := To_stdlogicvector(X"00");
	  mem(133) := To_stdlogicvector(X"00");
	  mem(134) := To_stdlogicvector(X"00");
	  mem(135) := To_stdlogicvector(X"00");
	  mem(136) := To_stdlogicvector(X"00");
	  mem(137) := To_stdlogicvector(X"00");
	  mem(138) := To_stdlogicvector(X"16");
	  mem(139) := To_stdlogicvector(X"62");
	  mem(140) := To_stdlogicvector(X"FE");
	  mem(141) := To_stdlogicvector(X"0F");
	  mem(142) := To_stdlogicvector(X"00");
	  mem(143) := To_stdlogicvector(X"00");
	  mem(144) := To_stdlogicvector(X"00");
	  mem(145) := To_stdlogicvector(X"00");
	  mem(146) := To_stdlogicvector(X"00");
	  mem(147) := To_stdlogicvector(X"00");
	  mem(148) := To_stdlogicvector(X"00");
	  mem(149) := To_stdlogicvector(X"00");
	  mem(150) := To_stdlogicvector(X"00");
	  mem(151) := To_stdlogicvector(X"00");
	  mem(152) := To_stdlogicvector(X"00");
	  mem(153) := To_stdlogicvector(X"00");
	  mem(154) := To_stdlogicvector(X"00");
	  mem(155) := To_stdlogicvector(X"00");
  

	
		--MAKE NO CHANGES AFTER THIS LINE.
	END MYDRAMINIT_64K;

END LC3B_TYPES;
